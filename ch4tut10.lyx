#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass hobo
\use_default_options true
\begin_modules
logicalmkup
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement H
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks true
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry false
\use_amsmath 0
\use_esint 0
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date true
\use_refstyle 0
\boxbgcolor #e0e0e8
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth -1
\tocdepth 2
\paragraph_separation skip
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 2
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section*
Tutorial 10 – DRYML I:  A First Look at DRYML
\end_layout

\begin_layout Standard
You will be introduced to the concept of a user-defined tag, called a DRYML
 tag.
 The tutorial shows you how to make minor changes to the home page template
 by defining DRYML tags.
 You will also learn how to parameterize tags with the DRYML parameter attribute
, param.
\end_layout

\begin_layout Standard
Note: Be sure not to confuse the DRYML param with the Rails params object.
 
\end_layout

\begin_layout Standard
Topics
\end_layout

\begin_layout Standard
Define a DRYML tag in the front/index.dryml template
\end_layout

\begin_layout Standard
Call the DRYML tag in the front/index.dryml template
\end_layout

\begin_layout Standard
Add a parameter to the DRYML tag
\end_layout

\begin_layout Standard
Add an attribute to the DRYML tag
\end_layout

\begin_layout Standard
Tutorial Application: four_table
\end_layout

\begin_layout Standard
Steps
\end_layout

\begin_layout Standard
1.	Define a tag.
  Open up the views/front/index.dryml file of the four_table application.
 This is Hobo’s home page.
\end_layout

\begin_layout Standard
At the top of the file enter the following code.
 The <def> tag below is Hobo’s DRYML tag for defining a custom tag.
 The code below defines a <messages> tag.
\end_layout

\begin_layout Standard
<def tag="messages">
\end_layout

\begin_layout Standard
	<br/><br/>
\end_layout

\begin_layout Standard
	<ul>
\end_layout

\begin_layout Standard
		<li >Message 1</li>
\end_layout

\begin_layout Standard
		<li >Message 2</li>
\end_layout

\begin_layout Standard
		<li >Message 3</li>
\end_layout

\begin_layout Standard
	</ul>
\end_layout

\begin_layout Standard
</def>
\end_layout

\begin_layout Standard
The entire markup between the <def> tags is standard HTML.
 When called, this <messages> tag will emit a three-line list.
\end_layout

\begin_layout Standard
2.	Call the tag.
 Go to the line that reads:
\end_layout

\begin_layout Standard
<h3>Congratulations! Your Hobo Rails App is up and running</h3>
\end_layout

\begin_layout Standard
Add a line after this one so that it reads:
\end_layout

\begin_layout Standard
<h3>Congratulations! Your Hobo Rails App is up and running</h3>
\end_layout

\begin_layout Standard
<messages/>
\end_layout

\begin_layout Standard
Note: The correct syntax is to place the forward slash after the tag name
 when you use the tag as a single tag rather than in the form of an opening
 and closing tag with no content in between.
\end_layout

\begin_layout Standard
Then refresh your browser:
\end_layout

\begin_layout Standard
One of the things that is different from Tutorial 1, is that you are now
 working both with a DRYML tag definition and with a DRYML tag.
 In the previous tutorial, you edited the tag definitions but you did not
 invoke a tag such as <index-page> explicitly.
\end_layout

\begin_layout Standard
Hobo took care of invoking the tags for you on-the-fly.
 Since Hobo’s Rapid component knows what the basic structure of a data driven
 web page is, it does not require you to code the template explicitly except
 when you want something different than the Hobo default.
\end_layout

\begin_layout Standard
In this tutorial you will be defining new tags unknown to Hobo, so you of
 course must invoke them explicitly.
\end_layout

\begin_layout Standard
3.	Parameterize the tag.
 Change the following code in the <messages> tag definition from:
\end_layout

\begin_layout Standard
		<li >Message 1</li>
\end_layout

\begin_layout Standard
		<li >Message 2</li>
\end_layout

\begin_layout Standard
		<li >Message 3</li>
\end_layout

\begin_layout Standard
	to:
\end_layout

\begin_layout Standard
		<li param="msg1">Message 1</li>
\end_layout

\begin_layout Standard
		<li param="msg2">Message 2</li>
\end_layout

\begin_layout Standard
		<li param="msg3">Message 3</li>
\end_layout

\begin_layout Standard
You have now created three parameters, which can be invoked in the following
 way:
\end_layout

\begin_layout Standard
<msg1:>message text</msg1:> 
\end_layout

\begin_layout Standard
<msg1:> is called a parameter tag.
 
\end_layout

\begin_layout Standard
Note: The colon (:) suffix indicates that the tag is a defined parameter
 tag.
 Later you will learn that some parameter tags are defined for you in the
 Rapid library.
\end_layout

\begin_layout Standard
4.	Use a parameter.
 Let’s invoke the <messages> tag but change the third message by addressing
 the <msg3:> parameter tag.
\end_layout

\begin_layout Standard
<h3>Congratulations! Your Hobo Rails App is up and running</h3>
\end_layout

\begin_layout Standard
<messages>
\end_layout

\begin_layout Standard
	<msg3:>This is the third message passed as a parameter.</msg3>
\end_layout

\begin_layout Standard
</messages>
\end_layout

\begin_layout Standard
The first two lines will remain the same while the third changes due to
 the use of the <msg3:> parameter tag.
 You have used a tag to pass data from the <msg3:> parameter tag into the
 <messages> tag.
\end_layout

\begin_layout Standard
5.
 Use some more parameters.
 Change the other two message lines likewise to:
\end_layout

\begin_layout Standard
<messages>
\end_layout

\begin_layout Standard
	<msg1:>This is the first message called as a parameter</msg1>
\end_layout

\begin_layout Standard
	<msg2:>This is the second message called as a parameter.</msg2>
\end_layout

\begin_layout Standard
	<msg3:>This is the third message called as a parameter.</msg3>
\end_layout

\begin_layout Standard
</messages>
\end_layout

\begin_layout Standard
and you should see:
\end_layout

\begin_layout Standard
6.
 Reverse the order of the parameter call.
 Now try the following code.
\end_layout

\begin_layout Standard
<messages>
\end_layout

\begin_layout Standard
	<msg2:>This is the second message.</msg2:>
\end_layout

\begin_layout Standard
	<msg1:>This is the first message.</msg1:>
\end_layout

\begin_layout Standard
	<msg3:>This is the third message.</msg3:>
\end_layout

\begin_layout Standard
<messages>
\end_layout

\begin_layout Standard
You will see that this edit will not change the order of the list because
 the order is defined by the tag definition not by its call.
 The tag calls the messages in the order set in the tag definition, namely
 <msg1:>, then <msg2:> and then <msg3:>.
\end_layout

\begin_layout Standard
7.	Create an html-like tag using param = ”default”.
 In the preceding steps, you learned how to reach into a tag with three
 parameter tags and change the default message text of the defined <messages>
 tag.
 Next you will emulate a regular HTML formatting tag using the param=”default”
 attribute.
\end_layout

\begin_layout Standard
Note: We have referred to an attribute above rather than a parameter because
 a change will be made by setting param to a value rather than by using
 a parameter tag.
\end_layout

\begin_layout Standard
Go back to the top of the views/front/index.dryml file and enter the following
 code after the first <def> .
 .
 .
 </def> tags.
 
\end_layout

\begin_layout Standard
<def tag="bd-it">
\end_layout

\begin_layout Standard
	<br/>
\end_layout

\begin_layout Standard
	<b><i><span param>stuff</span></i></b>
\end_layout

\begin_layout Standard
</def>
\end_layout

\begin_layout Standard
Here we have redefined the HTML <span> tag to format the tag content with
 bold AND italic formatting.
 Since the <span> tag is now parameterized, you can now replace the ‘stuff’
 continent with something you might want to format.
\end_layout

\begin_layout Standard
Call the <bd-it> tag right after the closing </messages> tag without using
 the <span:> parameter.
 This will demonstrate that the tag will just emit the formatted default
 word stuff.
\end_layout

\begin_layout Standard
<messages>
\end_layout

\begin_layout Standard
	<msg2:>This is the second message.</msg2:>
\end_layout

\begin_layout Standard
	<msg1:>This is the first message.</msg1:>
\end_layout

\begin_layout Standard
	<msg3:>This is the third message.</msg3:>
\end_layout

\begin_layout Standard
</messages>
\end_layout

\begin_layout Standard
<bd-it/>
\end_layout

\begin_layout Standard
If you use the <span:> parameter tag, you will format your content.
 
\end_layout

\begin_layout Standard
<bd-it/>	
\end_layout

\begin_layout Standard
<bd-it><span:>More stuff</span:></bd-it>
\end_layout

\begin_layout Standard
	
\end_layout

\begin_layout Standard
But the second line is a kind of clumsy looking way to get: More stuff.
 Instead, change your <def> code to:
\end_layout

\begin_layout Standard
<def tag="bd-it">
\end_layout

\begin_layout Standard
<br/>
\end_layout

\begin_layout Standard
<b><i><span param="default">stuff</span></i></b>
\end_layout

\begin_layout Standard
</def>
\end_layout

\begin_layout Standard
The param=”default” text is saying is that the <span:> parameter is automaticall
y assumed when you call the <bd-it> tag.
 You do not have to explicitly call it.
 Now change your call to:
\end_layout

\begin_layout Standard
<bd-it/>	
\end_layout

\begin_layout Standard
<bd-it>More Stuff</bd-it>
\end_layout

\begin_layout Standard
So now you have created a DRYML tag that looks just like an HTML tag.
 
\end_layout

\begin_layout Standard
Note: Once you change the <span:> parameter to the default parameter, Hobo
 will ignore explicit uses of it and only emit the default content if you
 call it explicitly.
 Once you use the default parameter attribute you are committed to the more
 compact notation.
 There can only be one “default” parameter in a tag definition.
\end_layout

\begin_layout Standard
The entire /views/front/index.dryml contents at the end of this tutorial
 is as follows:
\end_layout

\begin_layout Standard
<def tag="messages">
\end_layout

\begin_layout Standard
	<br/><br/>
\end_layout

\begin_layout Standard
	<ul>
\end_layout

\begin_layout Standard
		<li param="msg1">Message 1</li>
\end_layout

\begin_layout Standard
		<li param="msg2">Message 2</li>
\end_layout

\begin_layout Standard
		<li param="msg3">Message 3</li>
\end_layout

\begin_layout Standard
	</ul>
\end_layout

\begin_layout Standard
</def>
\end_layout

\begin_layout Standard
<def tag="bd-it">
\end_layout

\begin_layout Standard
    <br/>
\end_layout

\begin_layout Standard
    <b><i><span param="default">stuff</span></i></b>
\end_layout

\begin_layout Standard
</def>
\end_layout

\begin_layout Standard
<page title="Home">
\end_layout

\begin_layout Standard
	<body: class="front-page"/>
\end_layout

\begin_layout Standard
   <content:>
\end_layout

\begin_layout Standard
    <header class="content-header">
\end_layout

\begin_layout Standard
      <h1>Welcome to <app-name/></h1>
\end_layout

\begin_layout Standard
      <section class="welcome-message">
\end_layout

\begin_layout Standard
        <h3>Congratulations! Your Hobo Rails App is up and running</h3>
\end_layout

\begin_layout Standard
         <messages>
\end_layout

\begin_layout Standard
          <msg2:>This is the seond message.</msg2>
\end_layout

\begin_layout Standard
          <msg1:>This is the first messsage.</msg1>
\end_layout

\begin_layout Standard
          <msg3:>This is the third message passed as a parameter.</msg3>
\end_layout

\begin_layout Standard
         </messages>
\end_layout

\begin_layout Standard
         <bd-it/>
\end_layout

\begin_layout Standard
         <bd-it>More stuff</bd-it>
\end_layout

\begin_layout Standard
	  </section>
\end_layout

\begin_layout Standard
    </header>
\end_layout

\begin_layout Standard
    <section class="content-body">
\end_layout

\begin_layout Standard
    </section>
\end_layout

\begin_layout Standard
  </content:>
\end_layout

\begin_layout Standard
</page>
\end_layout

\begin_layout Section*

\end_layout

\end_body
\end_document
