#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass hobo
\use_default_options true
\master hobo.lyx
\begin_modules
logicalmkup
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement H
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\boxbgcolor #e6e6e6
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth -1
\tocdepth 2
\paragraph_separation skip
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Subsubsection*
Introductory Concepts and Comments
\end_layout

\begin_layout Subsubsection*
Tutorial 17 – The Agile Project Manager
\end_layout

\begin_layout Subsubsection*
Tutorial 18 – Using CKEditor (Rich Text) with Hobo
\end_layout

\begin_layout Subsubsection*
Tutorial 19 – Using FusionCharts with Hobo
\end_layout

\begin_layout Subsubsection*
Tutorial 20 – Adding User Comments to Models
\end_layout

\begin_layout Subsubsection*
Tutorial 21 – Replicating the Look and Feel of a Site
\end_layout

\begin_layout Subsubsection*
Tutorial 22 – Using Hobo Lifecycles for Workflow
\end_layout

\begin_layout Subsubsection*
Tutorial 23 – Using Hobo Lifecycles for Workflow
\end_layout

\begin_layout Subsubsection*
Tutorial 24 – Creating an Administration Sub-Site
\end_layout

\begin_layout Subsubsection*
Tutorial 25 – Using Hobo Database Index Generation
\end_layout

\begin_layout Section*
Introductory Concepts and Comments
\end_layout

\begin_layout Standard
This set of tutorials builds on the expertise you have developed so far
 with the Beginning Tutorials and Intermediate Tutorials.
 
\end_layout

\begin_layout Standard
You should be able to flex your muscles a bit, at rich text editing, charting,,
 or even completely change the look and feel of a site.
\end_layout

\begin_layout Standard
The “Agile Project Manager” implements a large range of Hobo features into
 a fairly substantial and useful application.
  Try out enhancing and modifying it to fit your needs.
\end_layout

\begin_layout Standard
At the end of the Advanced Tutorials you will have the expertise to build,
 customize, and have your data-rich  application ready to go into production.
  Enjoy!
\end_layout

\begin_layout Section*
Tutorial 17 – The Agile Project Manager
\end_layout

\begin_layout Standard
\begin_inset Box Shaded
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Description
Note: We have simplified this example somewhat by substituting the more
 traditional term “requirement”  for  what many agile development texts
 refer to “story”.
  One can extend this tutorial by linked one or many “requirements” for
 each user “story”.
 
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
Tutorial Application:  
\begin_inset Flex Code
status collapsed

\begin_layout Plain Layout
projects
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
Overview
\end_layout

\begin_layout Standard
This tutorial is adapted from the classic “Agility” tutorial created by
 Tom Locke.
  It retains much of Tom’s text and style.
 We have also highlighted quotes from Tom at critical points in the tutorial.
  
\end_layout

\begin_layout Standard
Here is a quick summary of our goals for this application:
\end_layout

\begin_layout Enumerate
The application “Projects” maintains a set of projects, requirements, and
 related tasks for a team of people.
 
\end_layout

\begin_layout Enumerate
Users access the application with a browser.
 The browser provides the capability to create, edit, delete and list projects,
 tasks, and task assignments.
\end_layout

\begin_layout Enumerate
All data entry fields have rollover hints to aid user data entry.
 Validation rules attached to the fields to prevent invalid entries.
 
\end_layout

\begin_layout Enumerate
Each project can have any number of associated tasks, and each task can
 have one or more team members assigned to it.
 
\end_layout

\begin_layout Enumerate
Each task has one status at any given time.
 A drop-down list of status codes will be displayed on a task creation page.
 Only one of these status codes can be selected and saved for this task.
\end_layout

\begin_layout Enumerate
There is a signup and login capability permitting each team member to create
 his/her own login name and password.
 The system administrator is determined by a simple rule--the first to log
 in to the application becomes the system administrator.
 
\end_layout

\begin_layout Enumerate
There will be a simple role facility that will allow an Administrator to
 assign roles to users.
 Both the Administrator and Coordinator roles can create and update projects,
 requirements, and tasks and assign team members to a task.
  Analysts, Developers, and Testers can change the status of a Requirement.
\end_layout

\begin_layout Enumerate
The task assignment page will have a drop-down list of all existing team
 members.
  Only members of this list can have tasks assigned to them.
\end_layout

\begin_layout Enumerate
A project page will display a list of all tasks assigned to the project.
\end_layout

\begin_layout Enumerate
A task page will display a list of team members assigned to the task.
\end_layout

\begin_layout Subsubsection*
Getting Started
\end_layout

\begin_layout Standard
Create the application like you have for the other tutorials:
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Code
   > hobo new projects --setup
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Now look again about what we want this app to do:
\end_layout

\begin_layout Itemize
Track multiple projects
\end_layout

\begin_layout Itemize
Each project has a collection of requirements (“requirements”) which are
 described at a high-level requirements using the language of the user
\end_layout

\begin_layout Itemize
Each requirement is just a brief chunk of text
\end_layout

\begin_layout Itemize
A requirement can be assigned a current status and a set of outstanding
 tasks
\end_layout

\begin_layout Itemize
Tasks can be assigned to users
\end_layout

\begin_layout Itemize
Each user will have a simple view of the tasks they are assigned to
\end_layout

\begin_layout Standard
So:
\end_layout

\begin_layout Itemize
Project (with a name) has many requirements
\end_layout

\begin_layout Itemize
Requirement (with a title, description and status) belongs to a project
 AND has many tasks
\end_layout

\begin_layout Itemize
Task (with a description) belongs to a requirement AND has many users (through
 task-assignments)
\end_layout

\begin_layout Itemize
User has many tasks (through task-assignments)
\end_layout

\begin_layout Standard
 Now we need to create the models outlined above using the Hobo generator:
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Code
> hobo g resource project name:string
\end_layout

\begin_layout Code
> hobo g resource requirement title:string 
\backslash

\end_layout

\begin_layout Code
  body:text status:string
\end_layout

\begin_layout Code
> hobo g resource task name:string
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Remember that the 
\begin_inset Flex Code
status collapsed

\begin_layout Plain Layout
hobo:resource
\end_layout

\end_inset

 generator builds the entire MVC (Model/Controller/View) infrastructure
 needed for any model requiring a web-font end.
  The “task assignments” model is simply the table required to support many-to-m
any relationships behind the scenes.
  So a view or controller is not needed, so we only need the hobo model
 generator:
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Code
> hobo g model task_assignment
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box Shaded
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Description
Note: We are using the convention of naming an association table with the
 combination of a model name with a descriptive intermediate name, with
 terms separated by an underscore:
\end_layout

\begin_deeper
\begin_layout Plain Layout
\begin_inset Flex Code
status collapsed

\begin_layout Plain Layout
task
\end_layout

\end_inset

 + 
\begin_inset Flex Code
status collapsed

\begin_layout Plain Layout
assignment
\end_layout

\end_inset

   becomes:   
\begin_inset Flex Code
status collapsed

\begin_layout Plain Layout
task_assignment
\end_layout

\end_inset


\end_layout

\end_deeper
\end_inset


\end_layout

\begin_layout Standard
The field declarations have been created by the generators in each model
 file, but not the associations.
 
\end_layout

\begin_layout Standard
To create the associations, edit each model file as outlined below and declare
 the association just below the 
\begin_inset Flex Code
status collapsed

\begin_layout Plain Layout
fields do ...
 end
\end_layout

\end_inset

 declaration in each model, as follows:
\end_layout

\begin_layout Standard
Adding "belongs_to :project" and "has_many :tasks" to the Requirement model
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename figures/ch5adding_requirements_assoc.png
	width 90col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Adding "has_many :requirements" to the Project class
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename figures/ch5adding_project_tasks_assoc.png
	width 90col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Adding "belongs_to :project" and "has_many :tasks" to the Requirement model
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note that we have chosen to specify the index name associated with the 
\begin_inset Flex Code
status collapsed

\begin_layout Plain Layout
belongs_to
\end_layout

\end_inset

 declaration in the Requirement model.
  We did this in case we might want to port this app to Oracle at some point,
 and Oracle has this irritating limitation of 30 characters for table, column,
 and index names.
  If we had not specified the index name, Rails would chose a default name,
 which is often longer than 30 characters.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename figures/ch5adding_assoc_to_task.png
	width 90col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Adding the “belongs_to” and “has_many” declarations to the Task model
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename figures/ch5adding_belongs_to_assocs_to_taskassignment.png
	width 90col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Adding the two "belongs_to" definitions to the TaskAssignment model
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename figures/ch5adding_assoc_to_user.png
	width 90col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Adding the "has_many" declarations to the User model
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Now Hobo will create a single migration for all of these changes:
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Code
> hobo g migration
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Load the migration file in your text editor to see what was generated:
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename figures/ch5first_hobo_migration.png
	width 90col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
First Hobo migration for Projects 
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename figures/ch5view_of_indexes.png
	width 90col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
View of indexes created by the migration
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
In the figure above you can see the indexes that were created in an Oracle
 environment.
  Notice that in addition to our custom indexes, all of the tables have
 a unique identifier column called “ID” that is also indexed.
  All of these indexes start with the “SYS_” prefix.
\end_layout

\begin_layout Standard
\begin_inset Box Shaded
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Description
Note: A change starting with Hobo 1.0 requires the developer to declare child
 models for the automatic Hobo Rapid display of child element counts as
 shown in the rest of this tutorial.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The code to add is 
\begin_inset Flex Emph
status collapsed

\begin_layout Plain Layout
italicized
\end_layout

\end_inset

 below:
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Code
class Project < ActiveRecord::Base
\end_layout

\begin_layout Code
  hobo_model # Don't put anything above this
\end_layout

\begin_layout Code
  fields do
\end_layout

\begin_layout Code
    name :string
\end_layout

\begin_layout Code
    timestamps
\end_layout

\begin_layout Code
  end
\end_layout

\begin_layout Code
  
\end_layout

\begin_layout Code
  has_many :requirements, :dependent=>:destroy
\end_layout

\begin_layout Code
  
\end_layout

\begin_layout Code
  
\begin_inset Flex Emph
status collapsed

\begin_layout Plain Layout
children :requirements
\end_layout

\end_inset


\end_layout

\begin_layout Code
[...]
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Code
class Requirement < ActiveRecord::Base
\end_layout

\begin_layout Code
  hobo_model # Don't put anything above this
\end_layout

\begin_layout Code
  fields do
\end_layout

\begin_layout Code
    title  :string
\end_layout

\begin_layout Code
    body   :text
\end_layout

\begin_layout Code
    status :string
\end_layout

\begin_layout Code
    timestamps
\end_layout

\begin_layout Code
  end
\end_layout

\begin_layout Code
  belongs_to :project, :index=>'requirement_project_index'
\end_layout

\begin_layout Code
  has_many :tasks, :dependent=>:destroy
\end_layout

\begin_layout Code
  
\end_layout

\begin_layout Code
  
\begin_inset Flex Emph
status collapsed

\begin_layout Plain Layout
children :tasks
\end_layout

\end_inset


\end_layout

\begin_layout Code
[...]
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Code
class Task < ActiveRecord::Base
\end_layout

\begin_layout Code
  hobo_model # Don't put anything above this
\end_layout

\begin_layout Code
  fields do
\end_layout

\begin_layout Code
    name :string
\end_layout

\begin_layout Code
    timestamps
\end_layout

\begin_layout Code
  end
\end_layout

\begin_layout Code
  
\end_layout

\begin_layout Code
  belongs_to :requirement, :index=>'requirement_task_index'
\end_layout

\begin_layout Code
  has_many :task_assignments, :dependent=>:destroy
\end_layout

\begin_layout Code
  has_many :users, :through=>:task_assignments
\end_layout

\begin_layout Code
  
\begin_inset Flex Emph
status collapsed

\begin_layout Plain Layout
children :task_assignments
\end_layout

\end_inset


\end_layout

\begin_layout Code
  
\begin_inset Flex Emph
status collapsed

\begin_layout Plain Layout
children :users
\end_layout

\end_inset


\end_layout

\begin_layout Code
[...]
\end_layout

\end_inset


\end_layout

\begin_layout Standard
After you run the migration fire up the app:
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Code
> rails server
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Here is what you app should look like now:
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename figures/ch5projects_home.png
	width 90col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
The default Home page for the Projects application
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Make sure you create a first user, which will by default have administrator
 rights.
  Then remember to stay in as an administrator (e.g., the user who signed
 up first), and spend a few minutes populating the app with projects, requiremen
ts and tasks.
\end_layout

\begin_layout Standard
Now enter a few projects like this:
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename figures/ch5projects_index.png
	width 90col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
The Projects index page
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Enter a couple of requirements for one of your projects:
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename figures/ch5new_requirement.png
	width 90col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
New Requirement page
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename figures/ch5requirements_index.png
	width 90col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Index view for Requirements
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
And enter some tasks for one of the requirements:
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename figures/ch5_new_task.png
	width 90col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
New Task page
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename figures/ch5tasks_index.png
	width 90col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Index view for Tasks
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Using the “Application Summary” page.
 A handy new feature starting with Hobo 0.9.0 is the Application Summary page.
  If you are an administrator you can access this page by entering the following
 URL in your browser:
\end_layout

\begin_layout Standard
\begin_inset CommandInset href
LatexCommand href
target "http://localhost:3000/dev/summary"

\end_inset


\end_layout

\begin_layout Standard
This summary provides you quick access to information on:
\end_layout

\begin_layout Itemize
Application Name	
\end_layout

\begin_layout Itemize
Application Location	
\end_layout

\begin_layout Itemize
Rails Version
\end_layout

\begin_layout Itemize
Change Control (e.g., Git)
\end_layout

\begin_layout Itemize
Bundled Gems
\end_layout

\begin_layout Itemize
Plugins
\end_layout

\begin_layout Itemize
Environments
\end_layout

\begin_layout Itemize
Models/Tables
\end_layout

\begin_layout Itemize
Model Associations
\end_layout

\begin_layout Standard
The following are screen shots of the Projects application so far.
  Notice that the development environment we have been using is Oracle.
\end_layout

\begin_layout Standard
\begin_inset Box Shaded
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Description
Note: The Application Summary is refreshed each time a 
\begin_inset Flex Code
status collapsed

\begin_layout Plain Layout
hobo g migration
\end_layout

\end_inset

 is executed.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename figures/ch5appsummary1.png
	width 90col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Part 1 of the Application Summary page
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename figures/ch5appsummary2.png
	width 90col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Part 2 of the Application Summary page
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename figures/ch5/appsummary3.png
	width 90col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Part 3 of the Application Summary page
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename figures/ch5/appsummary4.png

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Part 4 of the Application Summary page
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Removing actions
\end_layout

\begin_layout Standard
By default Hobo has given us a full set of restful actions for every single
 model/controller pair.
 But many of these page flows (“routes”) are not optimal for our application.
\end_layout

\begin_layout Standard
For example, why would we want an index page listing every task in the database?
 We only really want to see tasks listed against related requirements and
 users.
 We need to disable the routes we don’t want.
\end_layout

\begin_layout Standard
There’s an interesting change of approach here that often crops up with
 Hobo development.
 Normally you’d expect to have to build everything yourself.
 With Hobo, you often are given everything you want and more besides.
 Your job is to take away the parts that you don’t want
\end_layout

\begin_layout Standard
Here’s how we would remove, for example, the index action from TasksController.
 
\end_layout

\begin_layout Standard
In app/controllers/tasks_controller.rb, change
\end_layout

\begin_layout Standard
auto_actions :all
\end_layout

\begin_layout Standard
To
\end_layout

\begin_layout Standard
auto_actions :all, :except => :index
\end_layout

\begin_layout Standard
Next, refresh the browser and you’ll notice that “Tasks” has been removed
 from the main nav-bar.
 
\end_layout

\begin_layout Standard
Figure 168:  Effect of removing the "index" action from the Tasks controller
\end_layout

\begin_layout Standard
Note: Hobo’s page generators adapt to changes in the actions that you make
 available.
\end_layout

\begin_layout Standard
Here’s another similar trick.
 Browse to one of your projects that do not have related requirements.
 You’ll see the page text says “No requirements to display”:
\end_layout

\begin_layout Standard
Figure 169: View of "No Requirements to display" message
\end_layout

\begin_layout Standard
There is an “Edit Project” link, but no obvious way to add a requirement
 related to this project.
 Hobo has support for this--but we need to switch it on.
 
\end_layout

\begin_layout Standard
Add the following declaration to the requirements controller:
\end_layout

\begin_layout Standard
auto_actions_for :project, [:new, :create]
\end_layout

\begin_layout Standard
Figure 170: The "New Requirement" link now appears
\end_layout

\begin_layout Standard
Hobo’s page generators will respond to the existence of these routes and
 add a “New Requirement” link to the project page, and an appropriate “New
 Requirement” page:
\end_layout

\begin_layout Standard
Figure 171: View of the "New Requirement" page
\end_layout

\begin_layout Standard
Create a requirement and you’ll see the requirement has the same issue with
 an associated task – there is no obvious way to create one.
 Again, we can add the auto_actions_for declaration to the tasks controller,
 but this time we’ll only ask for a create action, and not a new action:
\end_layout

\begin_layout Standard
auto_actions_for :requirement, :create
\end_layout

\begin_layout Standard
Hobo’s page generator can support the lack of a ‘New Task’ page – it gives
 you an in-line form on the requirement page!
\end_layout

\begin_layout Standard
Figure 172: View of the in-line "Add a Task" form
\end_layout

\begin_layout Standard
Now we can continue to configure the available actions for all of the controller
s.
 So far we’ve seen the “black-list” style where you list what you don’t
 want:
\end_layout

\begin_layout Standard
auto_actions :all, :except => :index
\end_layout

\begin_layout Standard
There’s also “white-list” style where you list what you do want, e.g.:
\end_layout

\begin_layout Standard
auto_actions :index, :show
\end_layout

\begin_layout Standard
There’s also a handy shortcut to get just the read-only routes (i.e., the
 ones that don’t modify the database):
\end_layout

\begin_layout Standard
auto_actions :read_only
\end_layout

\begin_layout Standard
The opposite is handy for things that are manipulated by AJAX, but never
 viewed directly:
\end_layout

\begin_layout Standard
auto_actions :write_only # short for -- :create, :update, :destroy
\end_layout

\begin_layout Standard
Now edit each of the controllers as listed below:
\end_layout

\begin_layout Standard
class ProjectsController < ApplicationController
\end_layout

\begin_layout Standard
  hobo_model_controller
\end_layout

\begin_layout Standard
  auto_actions :all
\end_layout

\begin_layout Standard
end
\end_layout

\begin_layout Standard
class TasksController < ApplicationController
\end_layout

\begin_layout Standard
  hobo_model_controller
\end_layout

\begin_layout Standard
  auto_actions :write_only,:edit
\end_layout

\begin_layout Standard
  # Add the following to put an in-place editor within the Requirement page
\end_layout

\begin_layout Standard
  auto_actions_for :requirement, :create
\end_layout

\begin_layout Standard
end
\end_layout

\begin_layout Standard
  
\end_layout

\begin_layout Standard
class RequirementsController < ApplicationController
\end_layout

\begin_layout Standard
  hobo_model_controller
\end_layout

\begin_layout Standard
  # add this to remove the Requirement tab from the main navigation bar
 
\end_layout

\begin_layout Standard
  auto_actions :all, :except=> :index
\end_layout

\begin_layout Standard
 
\end_layout

\begin_layout Standard
 # add this line to get a New Requirement link for the Project page
\end_layout

\begin_layout Standard
  auto_actions_for :project, [:new, :create]
\end_layout

\begin_layout Standard
end
\end_layout

\begin_layout Standard
Notice the Task listing within a Requirement, and the “Add a Task” in-page
 editor:
\end_layout

\begin_layout Standard
Figure 173: Requirement page after modifying controller definitions
\end_layout

\begin_layout Standard
Permissions
\end_layout

\begin_layout Standard
So far we’ve done two major things with our app: 
\end_layout

\begin_layout Standard
Created models and specified associations
\end_layout

\begin_layout Standard
Modified controllers to specify which actions are available
\end_layout

\begin_layout Standard
There’s one more thing we typically do when creating a new Hobo app, before
 we even touch the view layer.
 We modify permissions in the model layer.
\end_layout

\begin_layout Standard
Adding Roles
\end_layout

\begin_layout Standard
Let’s do a simple addition to the User model.
  Here we have taken the simple route, and created a new field called “role”
 along with the list of acceptable values using the Ruby enum_string method:
\end_layout

\begin_layout Standard
 
\end_layout

\begin_layout Standard
Figure 174: Defining available roles using “enum_string”
\end_layout

\begin_layout Standard
Run a hobo g migration to add this field to the database.
\end_layout

\begin_layout Standard
Modify the create permission to allow an Administrator to create a new user:
\end_layout

\begin_layout Standard
Figure 175: Modifying the "create_permitted" method to the User model
\end_layout

\begin_layout Standard
Modify your Users Controller as follows:
\end_layout

\begin_layout Standard
Figure 176: Users Controller with "auto actions :all:
\end_layout

\begin_layout Standard
Run the server again and then refresh your browser: 
\end_layout

\begin_layout Standard
Figure 177: The Users tab is now active
\end_layout

\begin_layout Standard
Now we can edit a user and add a role:
\end_layout

\begin_layout Standard
Figure 178: The Edit User page with the new Role field
\end_layout

\begin_layout Standard
I have selected the “Analyst” option.
  So I have 
\end_layout

\begin_layout Standard
1.
  A Hobo system permission as an Administrator
\end_layout

\begin_layout Standard
2.
  An Application role as Analyst.
\end_layout

\begin_layout Standard
Now let’s see how to use this information.
\end_layout

\begin_layout Standard
Customizing the Permissions by Role
\end_layout

\begin_layout Standard
Here is what we would like to implement:
\end_layout

\begin_layout Standard
Only an administrator can delete projects, requirements, or tasks
\end_layout

\begin_layout Standard
Only an administrator or coordinator can create and edit projects, requirements,
 tasks or task assignments
\end_layout

\begin_layout Standard
Change your permissions in project.rb as follows:
\end_layout

\begin_layout Standard
Notice that to create a project, the active user must be an administrator
 OR:
\end_layout

\begin_layout Standard
The user must be signed up (not a guest)
\end_layout

\begin_layout Standard
The signed up user must have the role “Coordinator”
\end_layout

\begin_layout Standard
Also notice that we have entered “false” in the destroy_permitted? Definition.
 In this case, no user can erase a project.
  Deleting projects would have to be done behind the scenes in the database,
 or the permissions changed to clean up unwanted projects.
\end_layout

\begin_layout Standard
Now enter the same permissions (except for the destroy_permitted? permission)
 for requirements, tasks, and task assignments.
\end_layout

\begin_layout Standard
Here is the code for project.rb listed in the figure above:
\end_layout

\begin_layout Standard
class Project < ActiveRecord::Base
\end_layout

\begin_layout Standard
  hobo_model # Don't put anything above this
\end_layout

\begin_layout Standard
  fields do
\end_layout

\begin_layout Standard
    name :string
\end_layout

\begin_layout Standard
    timestamps
\end_layout

\begin_layout Standard
  end
\end_layout

\begin_layout Standard
  has_many :requirements, :dependent=> :destroy
\end_layout

\begin_layout Standard
 
\end_layout

\begin_layout Standard
 # --- Permissions --- #
\end_layout

\begin_layout Standard
  def create_permitted?
\end_layout

\begin_layout Standard
  	# Make sure the user is 1) Signed up and a Coordinator or 2) is an  
                                                                       
                        
\end_layout

\begin_layout Standard
  	# Adminstrator
\end_layout

\begin_layout Standard
   (acting_user.signed_up? &&  acting_user.role=="Coordinator") || acting_user.admi
nistrator?
\end_layout

\begin_layout Standard
  end
\end_layout

\begin_layout Standard
  def update_permitted?
\end_layout

\begin_layout Standard
   	# Make sure the user is 1) Signed up and a Coordinator or 2) is an 
     
\end_layout

\begin_layout Standard
   	# Adminstrator
\end_layout

\begin_layout Standard
   (acting_user.signed_up? &&  acting_user.role=="Coordinator") || acting_user.admi
nistrator?
\end_layout

\begin_layout Standard
  end
\end_layout

\begin_layout Standard
  def destroy_permitted?
\end_layout

\begin_layout Standard
    false
\end_layout

\begin_layout Standard
  end
\end_layout

\begin_layout Standard
  def view_permitted?(field)
\end_layout

\begin_layout Standard
    true
\end_layout

\begin_layout Standard
  end
\end_layout

\begin_layout Standard
end
\end_layout

\begin_layout Standard
Permissions for data integrity
\end_layout

\begin_layout Standard
The permissions system is not just for providing operations to some users
 but not to others.
 It is also used to prevent operations that don’t make sense for anyone.
  For example, notice default UI allows requirements to be moved from one
 project to another.
 This may or may not be a sensible operation for anyone to be doing.
  So, if you want to stop this from happening, change the “update_permitted?”
 method in requirement.rb:
\end_layout

\begin_layout Standard
	
\end_layout

\begin_layout Standard
 
\end_layout

\begin_layout Standard
Refresh the browser and you’ll see that menu was removed from the form automatic
ally.
\end_layout

\begin_layout Standard
Now make a similar change to prevent tasks being moved from one requirement
 to another in task.rb:
\end_layout

\begin_layout Standard
def update_permitted?
\end_layout

\begin_layout Standard
    ((acting_user.signed_up? && acting_user.role == "coordinator") or   acting_use
r.administrator?) && !requirement_changed?
\end_layout

\begin_layout Standard
end
\end_layout

\begin_layout Standard
Associations
\end_layout

\begin_layout Standard
Although we have modeled the assignment of tasks to users, at the moment
 there is no way for the user to set these assignments.
 We’ll add that to the task edit page.
 Create a task and browse to the edit page.
 Notice that only the description is editable.
 
\end_layout

\begin_layout Standard
Hobo does provide support for “multi-model” forms, but it is not active
 by default.
 To specify that a particular association should be accessible to updates
 from the form, you need to declare :accessible => true on the association.
\end_layout

\begin_layout Standard
In task.rb, edit the has_many :users association as follows:
\end_layout

\begin_layout Standard
has_many :users, :through => :task_assignments, :accessible => true
\end_layout

\begin_layout Standard
Note: Without that declaration, the permission system was reporting that
 this association was not editable.
 Now that the association is “accessible”, the permission system will check
 for create and destroy permissions on the join model TaskAssignment.
 As long as the current user has those permissions, the task edit page will
 now include a nice JavaScript powered control for assigning users in the
 edit-task page.
 Notice you can continue to assign users to a task and not leave the page:
\end_layout

\begin_layout Standard
Figure 181: Assigning multiple Users to a Task in the Edit Task page
\end_layout

\begin_layout Standard
Renaming Fields and Field Help
\end_layout

\begin_layout Standard
Hobo has a great facility that makes it easy to modify the display of a
 field name and the  field help that is displayed in the edit form.
  As of Hobo 1.3, this functionality has been merged into the Hobo internationali
zation module: i18n.
   
\end_layout

\begin_layout Standard
For this tutorial, we will rename the Project name field and also specify
 some help text for the field that will appear on the Project edit form.
  To do this, we need add the following to the config/locales/app.en.yml file:
\end_layout

\begin_layout Standard
en:
\end_layout

\begin_layout Standard
  activerecord:
\end_layout

\begin_layout Standard
    attributes:
\end_layout

\begin_layout Standard
      project:
\end_layout

\begin_layout Standard
        name: Project Name
\end_layout

\begin_layout Standard
    attribute_help:
\end_layout

\begin_layout Standard
      project:
\end_layout

\begin_layout Standard
        name: Enter a name for the project.
 Make it short and descriptive
\end_layout

\begin_layout Standard
Refresh your browser and enter a new project:
\end_layout

\begin_layout Standard
 
\end_layout

\begin_layout Standard
Figure 182: The New Project page using “ProjectHints”
\end_layout

\begin_layout Standard
Customizing views	
\end_layout

\begin_layout Standard
It’s pretty surprising how far you can get without even touching the view
 layer.
 That’s the way we like to work with Hobo -- get the models and controllers
 right and the view will probably get close to what you want.
 From there you can override just those parts of the view that you need
 to.
\end_layout

\begin_layout Standard
We do that using the DRYML template language, which is part of Hobo.
 DRYML is tag based – it allows you to define and use your own tags right
 alongside the regular HTML tags.
 Tags are like helpers, but a lot more powerful.
 DRYML is quite different to other tag-based template languages, thanks
 to features like the implicit context and nestable parameters.
 DRYML is also an extension of ERB so you can still use the ERB syntax if
 you are familiar with Rails.
\end_layout

\begin_layout Standard
DRYML is probably the single best part of Hobo.
 It’s very good at high-level re-use because it allows you to make very
 focused changes if a given piece of pre-packaged HTML is not quite what
 you want.
\end_layout

\begin_layout Standard
Changing the Front Page
\end_layout

\begin_layout Standard
The first thing we are going to do is to change the front page.
  Let’s change the title of the app and the default message: 
\end_layout

\begin_layout Standard
Figure 183: The default application name and welcome message
\end_layout

\begin_layout Standard
To change the application name, edit /config/application.rb:
\end_layout

\begin_layout Standard
Figure 184: Changing the application name in "config/application.rb"
\end_layout

\begin_layout Standard
Changing the app-name value for the app-name tag here will change it anywhere
 that tag is used throughout the application.
\end_layout

\begin_layout Standard
Now let’s change the rest of the page…
\end_layout

\begin_layout Standard
Bring up  /app/views/front/index.dryml in your editor:
\end_layout

\begin_layout Standard
This is what it looks like before you change it.
  Now change it to the following:
\end_layout

\begin_layout Standard
<page title="Home">
\end_layout

\begin_layout Standard
  <body: class="front-page"/>
\end_layout

\begin_layout Standard
  <content:>
\end_layout

\begin_layout Standard
    <header class="content-header">
\end_layout

\begin_layout Standard
      <h1>"Powered by Hobo"</h1>
\end_layout

\begin_layout Standard
      <section class="welcome-message">
\end_layout

\begin_layout Standard
        <h3>Here is what you can do:</h3>
\end_layout

\begin_layout Standard
        <ul>
\end_layout

\begin_layout Standard
          <li>Create and maintain any number of Projects</li>
\end_layout

\begin_layout Standard
          <li>Associate Requirements to each Project</li>
\end_layout

\begin_layout Standard
          <li>Assign Tasks and assign people to complete each Task</li>
\end_layout

\begin_layout Standard
        </ul>
\end_layout

\begin_layout Standard
      </section>
\end_layout

\begin_layout Standard
    </header>
\end_layout

\begin_layout Standard
  </content:>
\end_layout

\begin_layout Standard
</page>
\end_layout

\begin_layout Standard
Now refresh your browser:
\end_layout

\begin_layout Standard
Figure 186: Home page modified by changing "/front/index.dryml"
\end_layout

\begin_layout Standard
Add Assigned Users to the Tasks
\end_layout

\begin_layout Standard
Currently the only way to see who’s assigned to a task is to click the task’s
 edit link.
 It would be better to add a list of the assigned users to each task when
 we’re looking at a requirement.
\end_layout

\begin_layout Standard
DRYML has a feature called “polymorphic” tags.
 These are tags that are defined differently for different types of objects.
 Rapid makes use of this feature with a system of “cards”.
 The tasks that are displayed on the requirement page are rendered by the
 <card> tag.
\end_layout

\begin_layout Standard
You can define custom cards for particular models.
 Furthermore, if you call <base-card> you can define your card by tweaking
 the default, rather than starting from scratch.
 This is what DRYML is all about.
 It’s like a smart-bomb, capable of taking out little bits of unwanted HTML
 with pin-point strikes and no collateral damage.
\end_layout

\begin_layout Standard
The file app/views/taglibs/application.dryml is a place to put tag definitions
 that will be available throughout the site.
 Add this definition to that file:
\end_layout

\begin_layout Standard
<extend tag="card" for="Task">
\end_layout

\begin_layout Standard
  <old-card merge>
\end_layout

\begin_layout Standard
    <append-body:>
\end_layout

\begin_layout Standard
      <div class="users">
\end_layout

\begin_layout Standard
        Assigned users: <repeat:users join=", "><a/></repeat><else>None</else>
\end_layout

\begin_layout Standard
      </div>
\end_layout

\begin_layout Standard
    </append-body:>
\end_layout

\begin_layout Standard
  </old-card>
\end_layout

\begin_layout Standard
</extend>
\end_layout

\begin_layout Standard
Figure 187: Extending the card tag for Task in "application.dryml"
\end_layout

\begin_layout Standard
Now refresh the requirement page.
 You’ll see that in the cards for each task there is now a list of assigned
 users.
 The users are clickable - they link to each user’s home page (which doesn’t
 have much on it at the moment).
\end_layout

\begin_layout Standard
Figure 188: Viewing assigned users on a the Task card
\end_layout

\begin_layout Standard
The <extend> tag is used to extend any tag that’s already defined.
 The body of <extend> is our new definition.
 It’s very common to want to base the new definition on the old one, for
 example, we often want to insert a bit of extra content as we’ve done here.
 
\end_layout

\begin_layout Standard
We can do that by calling the “old” definition, which is available as <old-card>.
 We’ve passed the <append-body:> parameter to <old-card>, which is used
 to append content to the body of the card.
 
\end_layout

\begin_layout Standard
Some points to note:
\end_layout

\begin_layout Standard
The <repeat> tag provides a join attribute that we use to insert the commas.
 The link is created with a simple empty <a/>.
 It links to the ‘current context‘, which, in this case, is the user.
 The :users in <repeat:users> switches the context.
 It selects the users association of the task.
\end_layout

\begin_layout Standard
DRYML has a multi-purpose <else> tag.
 When used with repeat, it provides a default for the case when the collection
 is empty.
\end_layout

\begin_layout Standard
Add a Task Summary to the User’s Home Page
\end_layout

\begin_layout Standard
Now that each task provides links to the assigned users, the user’s page
 is not looking great.
 Rapid has rendered cards for the task-assignments but there’s no meaningful
 content in them.
 What we’d like to see there is a list of all the tasks the user has been
 assigned to.
 Having them grouped by requirement would be helpful too.
\end_layout

\begin_layout Standard
To achieve this we want to create a custom template for users show page.
 If you look in app/views/users you’ll see that it’s empty.
 When a page template is missing, Hobo tries to fall back on a defined tag.
 For a ‘show’ page, that tag is <show-page>.
 The Rapid library provides a definition of <show-page>, so that’s what
 we’re seeing at the moment.
 
\end_layout

\begin_layout Standard
As soon as we create app/views/users/show.dryml, that file will take over
 from the generic <show-page> tag.
 Try creating that file and just throw “Hello!” in there for now.
 You should see that the user’s show page now displays just “Hello!” and
 has lost all of the page styling.
\end_layout

\begin_layout Standard
If you now edit show.dryml to read ”<show-page/>” you’ll see we’re back where
 we started.
 The <show-page> tag is just being called explicitly instead of by convention.
 
\end_layout

\begin_layout Standard
Rapid has generated a custom definition of <show-page for="User">.
 You can find this in app/views/taglibs/auto/rapid/pages.dryml.
 
\end_layout

\begin_layout Standard
Don’t edit this file! Your changes will be overwritten.
 Instead, use this file as a reference so you can see what the page provides,
 and what parameters there are (the param attributes).
 
\end_layout

\begin_layout Standard
Here is the top of the file:
\end_layout

\begin_layout Standard
Now find the “show-page” tag for User:
\end_layout

\begin_layout Standard
Figure 191: The auto-generated "show-page" tag for User in "pages.dryml”
\end_layout

\begin_layout Standard
Now let’s get the content we’re after - the user’s assigned tasks, grouped
 by requirement.
 It’s only five lines of markup to put in a file 
\backslash
views
\backslash
users
\backslash
show.dryml.
\end_layout

\begin_layout Standard
<show-page>
\end_layout

\begin_layout Standard
  <content-body:>
\end_layout

\begin_layout Standard
    <h3><Your/> Assigned Tasks</h3>
\end_layout

\begin_layout Standard
    <repeat with="&@user.tasks.group_by(&:requirement)">
\end_layout

\begin_layout Standard
      <h4>Requirement: <a with="&this_key"/></h4>
\end_layout

\begin_layout Standard
      <collection/>
\end_layout

\begin_layout Standard
    </repeat>
\end_layout

\begin_layout Standard
  </content-body:>
\end_layout

\begin_layout Standard
</show-page>
\end_layout

\begin_layout Standard
This will override the definition in pages.dryml and display a page similar
 to the following:
\end_layout

\begin_layout Standard
Figure 192: View of the enhanced User "show-page"
\end_layout

\begin_layout Standard
The <Your> tag is a handy little gadget.
 It outputs “Your” if the context is the current user, otherwise it outputs
 the user’s name.
 You’ll see “Your Assigned Tasks” when looking at yourself, and “Fred’s
 Assigned Tasks” when looking at Fred.
\end_layout

\begin_layout Standard
We’re using <repeat> again, but this time we’re setting the context to the
 result of a Ruby expression (with="&...expr...").
 The expression: 
\end_layout

\begin_layout Standard
@user.tasks.group_by(&:requirement) 
\end_layout

\begin_layout Standard
	
\end_layout

\begin_layout Standard
gives us the grouped tasks.
 Inside the “repeat this” (the implicit context) will be an array of tasks,
 and this_key will be the requirement.
 
\end_layout

\begin_layout Standard
So <a with="&this_key"> gives us a link to the requirement.
 <collection> is used to render a collection of anything in a <ul> list.
 By default it renders <card> tags.
 To change this, just provide a body to the <collection> tag.
  Now click on the Users tab to see a summary of tasks for all users:
\end_layout

\begin_layout Standard
Figure 193: The Users tab showing all assignments
\end_layout

\begin_layout Standard
Now you can get the big picture of all user assignments.
\end_layout

\begin_layout Standard
This is a lot to take in all at once.
  The main idea here is to give you an overview of what’s possible.
 See The DRYML Guide for more in-depth information:
\end_layout

\begin_layout Standard
http://cookbook.hobocentral.net/manual/dryml-guide
\end_layout

\begin_layout Standard
Improve the Project Page with a Searchable, Sortable table
\end_layout

\begin_layout Standard
The project page is currently workable, but we can easily improve it a lot.
 Hobo Rapid provides a tag called  <table-plus> which:
\end_layout

\begin_layout Standard
Renders a table with support for sorting by clicking on the headings
\end_layout

\begin_layout Standard
Provides a built-in search bar for filtering the rows displayed
\end_layout

\begin_layout Standard
Searching and sorting are done server-side so we need to modify the controller
 as well as the view for this enhancement.
\end_layout

\begin_layout Standard
As with the user’s show-page, to get started put a simple call to <show-page/>
 in app/views/projects/show.dryml
\end_layout

\begin_layout Standard
To see what this page is doing, take a look at
\end_layout

\begin_layout Standard
 <def tag="show-page" for="Project">
\end_layout

\begin_layout Standard
 in pages.dryml.
 (app/views/taglibs/auto/rapid).
 
\end_layout

\begin_layout Standard
Notice this tag:
\end_layout

\begin_layout Standard
<collection:requirements param/>
\end_layout

\begin_layout Standard
That’s the part we want to replace with the table.
 Note that when a param attribute doesn’t give a name, the name defaults
 to the same name as the tag.
\end_layout

\begin_layout Standard
Here’s how we would replace that <collection> with a simple list of links:
\end_layout

\begin_layout Standard
<show-page>
\end_layout

\begin_layout Standard
  <collection: replace>
\end_layout

\begin_layout Standard
    <div>
\end_layout

\begin_layout Standard
      <repeat:requirements join=", "><a/></repeat>
\end_layout

\begin_layout Standard
    </div>
\end_layout

\begin_layout Standard
  </collection:>
\end_layout

\begin_layout Standard
</show-page>
\end_layout

\begin_layout Standard
You should now see that in place of the requirement cards, we now get a
 simple comma-separated list of links to the requirements.
 Not what we want of course, but it illustrates the concept of replacing
 a parameter.
 Here’s how we get the “table-plus”:
\end_layout

\begin_layout Standard
<show-page>
\end_layout

\begin_layout Standard
  <collection: replace>
\end_layout

\begin_layout Standard
    <table-plus:requirements fields="this, status">
\end_layout

\begin_layout Standard
      <empty-message:>No requirements match your criteria</empty-message:>
\end_layout

\begin_layout Standard
    </table-plus>
\end_layout

\begin_layout Standard
  </collection:>
\end_layout

\begin_layout Standard
</show-page>
\end_layout

\begin_layout Standard
The fields attribute to <table-plus> lets you specify a list of fields that
 will become the columns in the table.
 We could have specified fields="title, status" which would have given us
 the same content in the table, but by saying this, the first column contains
 links to the requirements, rather than just the title as text.
\end_layout

\begin_layout Standard
We could also add a column showing the number of tasks in a requirement.
 Change to fields="this, tasks.count, status and see that a column is added
 with a readable title “Tasks Count”.
\end_layout

\begin_layout Standard
To get the search feature working, we need to update the controller side.
 Add a show method to app/controllers/projects_controller.rb like this:
\end_layout

\begin_layout Standard
def show
\end_layout

\begin_layout Standard
  @project = find_instance
\end_layout

\begin_layout Standard
  @reqlist = @project.requirements.where(["title like ?", "%#{params[:search]}%"]).
order(parse_sort_param(:title, :status).join(' '))
\end_layout

\begin_layout Standard
end
\end_layout

\begin_layout Standard
What we are doing is creating two instance variables that will hold the
 values in memory between the controller and view.
\end_layout

\begin_layout Standard
@project = Holds the information for the project that has just been clicked
\end_layout

\begin_layout Standard
@reqlist = A variable name we chose to hold the list of projects returned
 by the apply_scopes method.
 
\end_layout

\begin_layout Standard
If there are no values in the search params, all requirements for that project
 are returned.
  The first time the projects page is loaded params will be null.
 
\end_layout

\begin_layout Standard
    Then get the <table-plus> to use @requirements:	
\end_layout

\begin_layout Standard
<table-plus with="&@reqlist" fields="this, tasks.count, status">
\end_layout

\begin_layout Standard
Now enter a word in the Search box and see how the requirement list is filtered:
\end_layout

\begin_layout Standard
Figure 196: Using a search within the Requirements listing
\end_layout

\begin_layout Standard
Other Enhancements
\end_layout

\begin_layout Standard
We’re now going to work through some more easy but very valuable enhancements
 to the application.
 We will add:
\end_layout

\begin_layout Standard
A menu for requirement statuses.
 We’ll do this first with a hard-wired set of options, and then add the
 ability to manage the set of available statuses.
\end_layout

\begin_layout Standard
Filtering of requirements by status on the project page
\end_layout

\begin_layout Standard
Drag and drop re-ordering of tasks for easy prioritization.
\end_layout

\begin_layout Standard
Rich text formatting of requirements.
 This is implemented by changing one symbol in the source code and adding
 the CKEditor plugin.
\end_layout

\begin_layout Standard
Requirement Status Menu
\end_layout

\begin_layout Standard
We’re going to do this in two stages.
  First using a fixed menu that will require a source-code change if you
 ever need to alter the available statuses.
 We’ll then remove that restriction by adding a RequirementStatus model.
 We’ll also see the migration generator in action again.
\end_layout

\begin_layout Standard
The fixed menu is very simple.
 Locate the declaration of the status field in requirement.rb (it’s in the
 fields do ...
 end block), and change it to this:
\end_layout

\begin_layout Standard
status enum_string(:proposed, :accepted, :rejected, :reviewing, :developing,
 :completed) # etc..
 
\end_layout

\begin_layout Standard
Now the Edit Requirement page looks like this, with a select list:
\end_layout

\begin_layout Standard
Figure 197: The Edit Requirement form with selectable status codes
\end_layout

\begin_layout Standard
The menu is working in the edit requirement page now.
 It would be nice though if we had an “AJAX-ified” editor right on the requireme
nt page.
 Edit the file
\end_layout

\begin_layout Standard
  app/views/requirements/show.dryml 
\end_layout

\begin_layout Standard
to be:
\end_layout

\begin_layout Standard
<show-page>
\end_layout

\begin_layout Standard
  <field-list: tag="editor"/>
\end_layout

\begin_layout Standard
</show-page>
\end_layout

\begin_layout Standard
Now the page has an in-place editor that does not require a submit button
 update.
  
\end_layout

\begin_layout Standard
Figure 198: Creating an AJAX status update for Requirements
\end_layout

\begin_layout Standard
Simply select the new status, and a save is automatically executed via an
 AJAX call.
\end_layout

\begin_layout Standard
How did Hobo do that? <show-page> uses a tag called <field-list> to render
 a table of fields.
 DRYML’s parameter mechanism allows the caller to customize the parameters
 that are passed to <field-list>.
 
\end_layout

\begin_layout Standard
On our requirement page the field-list contains only the status field.
 By default <field-list> uses the <view> tag to render read-only views of
 the fields, but that can be changed by passing a tag name to the tag attribute.
 We’re passing the name “editor” which is a DRYML tag for creating AJAX-style
 in-place editors.
 
\end_layout

\begin_layout Standard
Create a Configurable Status List
\end_layout

\begin_layout Standard
In order to support management of the statuses available, we’ll create a
 Requirement Status model:
\end_layout

\begin_layout Standard
> hobo g resource requirement_status name:string
\end_layout

\begin_layout Standard
Whenever you create a new model and controller with Hobo, get into the habit
 of thinking about permissions and controller actions.
 
\end_layout

\begin_layout Standard
In this case, we probably want only administrators to be able to manage
 the permissions.
 As for actions, we probably only want the write actions, and the index
 page:
\end_layout

\begin_layout Standard
auto_actions :write_only, :new, :index
\end_layout

\begin_layout Standard
Next, remove the status field from the fields do ...
 end block in the Requirement model and add the following association declaratio
n:
\end_layout

\begin_layout Standard
belongs_to :status, :class_name => "RequirementStatus",
\end_layout

\begin_layout Standard
 :index => 'requirement_status_index'
\end_layout

\begin_layout Standard
Now run the migration generator
\end_layout

\begin_layout Standard
> hobo g migration
\end_layout

\begin_layout Standard
You’ll see that the migration generator considers this change to be ambiguous
 and will prompt you for an action.
 
\end_layout

\begin_layout Standard
Note: Whenever there are columns removed and columns added, the migration
 generator can’t tell whether you’re actually removing one column and adding
 another, or if you are renaming the old column.
 It’s also pretty fussy about what it makes you type.
 We really don’t want to play fast and loose with precious data.
\end_layout

\begin_layout Standard
So, for the case at hand, to confirm that you want to drop the ‘status’
 column, you have to type in full: “drop status”.
\end_layout

\begin_layout Standard
Once you’ve done that you’ll see that the generated migration includes the
 creation of the new foreign key and the removal of the old status column.
\end_layout

\begin_layout Standard
That’s it.
 The page to manage the requirement statuses should appear in the main navigatio
n.
\end_layout

\begin_layout Standard
We’ve decided to revise our list while entering them using the New Requirement
 Status page:
\end_layout

\begin_layout Standard
	
\end_layout

\begin_layout Standard
Now that we’ve got more structured statuses, let’s do something with them…
\end_layout

\begin_layout Standard
Reordering Tasks
\end_layout

\begin_layout Standard
We’re now going to add the ability to re-order a requirement’s tasks by
 drag-and-drop.
 There’s support for this built into Hobo, so there’s not much to do.
 First we need the acts_as_list plugin:
\end_layout

\begin_layout Standard
> rails plugin install git://github.com/rails/acts_as_list.git
\end_layout

\begin_layout Standard
Now two changes to our models:	
\end_layout

\begin_layout Standard
Task needs:
\end_layout

\begin_layout Standard
acts_as_list :scope => :requirement
\end_layout

\begin_layout Standard
Requirement needs a modification to the has_many :tasks declaration:
\end_layout

\begin_layout Standard
has_many :tasks, :dependent => :destroy, :order => :position
\end_layout

\begin_layout Standard
The migration generator knows about the acts_as_list plugin, so you can
 just run it and you’ll get the new position column on Task which is needed
 to keep track of ordering for you.
\end_layout

\begin_layout Standard
> hobo g migration
\end_layout

\begin_layout Standard
Now refresh the application…
\end_layout

\begin_layout Standard
You’ll notice a slight glitch – the tasks position has been added to the
 new-task and edit-task forms.
 Fix this by customizing the Task form.
\end_layout

\begin_layout Standard
In application.dryml add:
\end_layout

\begin_layout Standard
<extend tag="form" for="Task">
\end_layout

\begin_layout Standard
  <old-form merge>
\end_layout

\begin_layout Standard
    <field-list: fields="name, users"/>
\end_layout

\begin_layout Standard
  </old-form>
\end_layout

\begin_layout Standard
</extend>
\end_layout

\begin_layout Standard
On the task edit page you might also have noticed that Hobo Rapid didn’t
 manage to figure out a destination for the cancel link.
 You can fix that by editing tasks/edit.dryml to be:
\end_layout

\begin_layout Standard
<edit-page>
\end_layout

\begin_layout Standard
  <form:>
\end_layout

\begin_layout Standard
    <cancel: with="&this.requirement"/>
\end_layout

\begin_layout Standard
  </form:>
\end_layout

\begin_layout Standard
</edit-page>
\end_layout

\begin_layout Standard
This is a good demonstration of DRYML’s nested parameter feature.
 The <edit-page> makes its form available as a parameter, and the form provides
 a <cancel:> parameter.
 
\end_layout

\begin_layout Standard
We can drill down from the edit-page to the form and then to the cancel
 link to pass in a custom attribute.
 You can do this to any depth.
\end_layout

\begin_layout Standard
Adding a “Due Date” to Tasks
\end_layout

\begin_layout Standard
Let’s first add a good library of date and time validations:
\end_layout

\begin_layout Standard
Add the following line to the end of the Gemfile file in your application
 root directory:
\end_layout

\begin_layout Standard
gem “validates_timeliness”
\end_layout

\begin_layout Standard
Then run the following command in your console:
\end_layout

\begin_layout Standard
> bundle install
\end_layout

\begin_layout Standard
Now update your Task model with a due date, and add this validation for
 that date field:
\end_layout

\begin_layout Standard
validates_date :due_date, :on_or_after => Date.today
\end_layout

\begin_layout Standard
 
\end_layout

\begin_layout Standard
Figure 199: Task model with "due_date" and a validation for the date
\end_layout

\begin_layout Standard
In application.dryml add the new “due_date” field:
\end_layout

\begin_layout Standard
<extend tag="form" for="Task">
\end_layout

\begin_layout Standard
  <old-form merge>
\end_layout

\begin_layout Standard
    <field-list: fields="name, due_date, users"/>
\end_layout

\begin_layout Standard
  </old-form>
\end_layout

\begin_layout Standard
</extend>
\end_layout

\begin_layout Standard
Figure 200: Error message from trying to enter a date earlier than today
\end_layout

\begin_layout Standard
Tutorial 18 – Using CKEditor (Rich Text) with Hobo
\end_layout

\begin_layout Standard
By Tola Awofolu
\end_layout

\begin_layout Standard
Tutorial Application:  projects
\end_layout

\begin_layout Standard
Overview
\end_layout

\begin_layout Standard
CKEditor is the new rich text editor that replaces the popular FCKeditor
 used by many web developers for years.
\end_layout

\begin_layout Standard
To use CKEditor (3.x):
\end_layout

\begin_layout Standard
Download CKEditor from the download website:  http://www.ckeditor.com
\end_layout

\begin_layout Standard
Extract the downloaded  zip file, (ckeditor_3.5.zip or ckeditor_3.5.tar.gz at
 the time of this writing)  to a new directory, public/javascripts/ckeditor
 in your Hobo application from the website:
\end_layout

\begin_layout Standard
Figure 201: CKEditor source folder listing
\end_layout

\begin_layout Standard
Add the following file, load_ckeditor.js, to the public/javascripts directory
 of your Hobo application:
\end_layout

\begin_layout Standard
HoboCKEditor = { 
\end_layout

\begin_layout Standard
  newEditor : function(elm, buttons) {
\end_layout

\begin_layout Standard
    if (elm.name != '') {
\end_layout

\begin_layout Standard
      oInstance = CKEDITOR.replace( elm.name , 
\end_layout

\begin_layout Standard
      { toolbar : HoboCKEditor.standardToolbarConfig || buttons }
\end_layout

\begin_layout Standard
      );
\end_layout

\begin_layout Standard
      oInstance.setData( elm.value );
\end_layout

\begin_layout Standard
      oInstance.resetDirty();
\end_layout

\begin_layout Standard
    }
\end_layout

\begin_layout Standard
    return oInstance;
\end_layout

\begin_layout Standard
},
\end_layout

\begin_layout Standard
makeEditor : function(elm) {
\end_layout

\begin_layout Standard
    if (!elm.disabled && !elm.readOnly){
\end_layout

\begin_layout Standard
      HoboCKEditor.newEditor(elm);
\end_layout

\begin_layout Standard
    }
\end_layout

\begin_layout Standard
  },
\end_layout

\begin_layout Standard
standardToolbarConfig:  [ ['DocProps','-','Preview','-','Templates'],
\end_layout

\begin_layout Standard
                    ['Cut','Copy','Paste','PasteText','PasteWord','-','Print','S
pellCheck'],
\end_layout

\begin_layout Standard
                    ['Undo','Redo','-','Find','Replace','-','SelectAll','RemoveF
ormat'],
\end_layout

\begin_layout Standard
                    [],
\end_layout

\begin_layout Standard
                    '/',
\end_layout

\begin_layout Standard
                    ['Bold','Italic','Underline','StrikeThrough','-','Subscript'
,'Superscript'],
\end_layout

\begin_layout Standard
                    ['OrderedList','UnorderedList','-','Outdent','Indent','Block
quote'],
\end_layout

\begin_layout Standard
                    ['JustifyLeft','JustifyCenter','JustifyRight','JustifyFull']
,
\end_layout

\begin_layout Standard
                    ['Link','Unlink'],
\end_layout

\begin_layout Standard
                    ['Image','Rule','SpecialChar','PageBreak'],
\end_layout

\begin_layout Standard
                    '/',
\end_layout

\begin_layout Standard
                    ['Style','FontFormat','FontName','FontSize'],
\end_layout

\begin_layout Standard
                    ['TextColor','BGColor'],
\end_layout

\begin_layout Standard
                    ['FitWindow','ShowBlocks','-','About'] ]
\end_layout

\begin_layout Standard
     
\end_layout

\begin_layout Standard
  }
\end_layout

\begin_layout Standard
Hobo.makeHtmlEditor = HoboCKEditor.makeEditor
\end_layout

\begin_layout Standard
 
\end_layout

\begin_layout Standard
Note: The code listed above has line wrapping because of the width of the
 paper.
  Please remove and hard return characters in your code.
\end_layout

\begin_layout Standard
Notice that the “standardToolbarConfig” portion of this JavaScript customizes
 the CKEditor toolbar options.
  Read the CKEditor documentation for more options you may wish to add.
\end_layout

\begin_layout Standard
This code also replaces the normal text box with the rich-text editor, as
 long as the text box is an HTML “textarea” tag that includes this HTML
 attribute in the tag definition.
\end_layout

\begin_layout Standard
 
\end_layout

\begin_layout Standard
Here’s an example of HTML markup that is created by Hobo:
\end_layout

\begin_layout Standard
	<textarea id= “contact[notes]” class= “contact large”/>
\end_layout

\begin_layout Standard
This HTML markup is automatically generated by Hobo for fields defined with
 the :html symbol in the model, so, open your app/models/requirement.rb file
 and change the ‘body’ field to :html:
\end_layout

\begin_layout Standard
Figure 202: Using the ":html" field option to trigger rich-text editing
\end_layout

\begin_layout Standard
Add the following lines of code to app/views/taglibs/application.dryml:
\end_layout

\begin_layout Standard
<extend tag="page"> 
\end_layout

\begin_layout Standard
  <old-page merge> 
\end_layout

\begin_layout Standard
    <after-scripts:> 
\end_layout

\begin_layout Standard
      <javascript name="ckeditor/ckeditor"/>        
\end_layout

\begin_layout Standard
      <javascript name="load_ckeditor"/>  
\end_layout

\begin_layout Standard
    </after-scripts:> 
\end_layout

\begin_layout Standard
  </old-page>
\end_layout

\begin_layout Standard
</extend>
\end_layout

\begin_layout Standard
Now access the Edit page for any requirement you have defined and the body
 field should look as follows:
\end_layout

\begin_layout Standard
Figure 203: Sample Hobo form using CKEditor
\end_layout

\begin_layout Standard
Tutorial 19 – Using FusionCharts with Hobo
\end_layout

\begin_layout Standard
By Marcelo Giorgi
\end_layout

\begin_layout Standard
Overview
\end_layout

\begin_layout Standard
Presenting data in a visual informative way is a powerful too.
 A widely-used charting and graphing library that includes lots of special
 effects is FusionCharts from InfoSoft (http://www.fusioncharts.com/).
  
\end_layout

\begin_layout Standard
FusionCharts offers a wide range of flash components for rendering data-driven
 charts, graphs, and maps.
 The way to feed those flash components with our data is to create an XML
 file (with a specific format and semantics understood by FusionCharts)
 and then setting the URL for that file so that the Flash component (running
 on the client browser) can reach it.
\end_layout

\begin_layout Standard
In this tutorial we will continue with the four_table project you completed
 earlier so we can leverage the existing models and just focus on the chart
 functionality.
\end_layout

\begin_layout Standard
We’ll be adding two charts to the project:
\end_layout

\begin_layout Standard
Recipes By Country (which counts the number of recipes for each country)
\end_layout

\begin_layout Standard
Recipes by Category (which counts the number of recipes in each category)
\end_layout

\begin_layout Standard
Configuring FusionCharts for our Hobo application
\end_layout

\begin_layout Standard
The first thing we need to do is download the trial version of  FusionCharts
 Version 3.
 Go to the URL  http://www.fusioncharts.com/Download.asp and submit the form
 as shown below:
\end_layout

\begin_layout Standard
Figure 204: Registration form to request FusionCharts
\end_layout

\begin_layout Standard
Figure 205: Download page for FusionCharts
\end_layout

\begin_layout Standard
.
\end_layout

\begin_layout Standard
Click on the ‘Download FusionCharts v3 (Evaluation)’ link, save and unzip
 the file into a safe location, such as, c:
\backslash
FusionChartsDistribution.
 
\end_layout

\begin_layout Standard
Next:
\end_layout

\begin_layout Standard
1.
 Create a new folder under the hobo “public” folder called FusionCharts.
  Copy all the swf files contained in the folder c:
\backslash
FusionChartsDistribution
\backslash
Charts to folder you created:  
\backslash
four_table
\backslash
public
\backslash
FusionCharts 
\end_layout

\begin_layout Standard
	
\end_layout

\begin_layout Standard
Figure 206: Target location for the FusionCharts SWF files
\end_layout

\begin_layout Standard
2.
 Next, copy the file c:
\backslash
FusionChartsDistribution
\backslash
JSClass
\backslash
FusionCharts.debug.js to 
\backslash
four_table
\backslash
public
\backslash
javascripts
\end_layout

\begin_layout Standard
3.
 Finally, we are ready to reference the JavaScript file (copied in Step
 2) in our application.dryml file, as follows:
\end_layout

\begin_layout Standard
Figure 207: Adding the required <extend tag=’page’> definition in application.dry
ml
\end_layout

\begin_layout Standard
As you can see from the code of application.dryml,we extend the ‘page’ view
 so that we always include the JavaScript file FusionCharts.debug.js.
 We could include this JavaScript at a page level, but for the purposes
 of this tutorial seemed more practical to do it this way.
\end_layout

\begin_layout Standard
Adding sample data
\end_layout

\begin_layout Standard
Before implementing the chart functionality, create some sample data to
 use:
\end_layout

\begin_layout Standard
Figure 208: Screen shot of sample recipe data for the tutorial
\end_layout

\begin_layout Standard
It is probably better to first use the data presented here to make sure
 your charts will look the same as the tutorial.
 
\end_layout

\begin_layout Standard
Recipes By Country
\end_layout

\begin_layout Standard
In order to implement a “Recipes By Country” chart we need to complete two
 steps: 
\end_layout

\begin_layout Standard
1.
 Programmatically save the data to an XML file
\end_layout

\begin_layout Standard
2.
 Configure the Flash Component to retrieve the generated data.
\end_layout

\begin_layout Standard
1.
 Save the data to an XML file
\end_layout

\begin_layout Standard
For our first chart we need to modify the RecipesController.rb in order to
 save the data (XML file) needed by the FusionCharts Flash component.
 We will activate the chart within the recipes/index.dryml file view as the
 data needed will be derived from the collection Recipes.
\end_layout

\begin_layout Standard
To get this to work, we will need to add a filter method to the controller,
 and a method to render XML.
 Take a look at the completed program below:
\end_layout

\begin_layout Standard
Figure 209: Enhancements to RecipesController to provide data to FusionCharts
\end_layout

\begin_layout Standard
As you can see (modifications are highlighted in bold italics below), we
 add a new filter to store the XML file only when we receive a request for
 the index page.
\end_layout

\begin_layout Standard
class RecipesController < ApplicationController
\end_layout

\begin_layout Standard
  hobo_model_controller
\end_layout

\begin_layout Standard
  before_filter :save_fusion_chart_data, :only => [:index]
\end_layout

\begin_layout Standard
  auto_actions :index, :show, :new, :edit, :create, :update, :destroy
\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Standard
Now we must define the ruby method save_fusion_chart_data for this controller.
 For now ignore the “private” method that encloses the code:
\end_layout

\begin_layout Standard
Let’s go through this code:
\end_layout

\begin_layout Standard
In this line we define an instance variable (@recipes_count_by_countries)
 that resolves the query of how many recipes there are for each country.
 
\end_layout

\begin_layout Standard
In this line we define the local path (from the Server point of view) where
 the XML data file will be stored.
 As you can see, we are pointing to the public directory of the Hobo application
, and that’s necessary because the file must be available so that the FusionChar
ts Flash component (on the client side) can load it.
\end_layout

\begin_layout Standard
This line uses the Rails “render_to_string” method using the template with
 the semantics needed by FusionCharts that is included in the “chart_data_genera
tor_for_count_by_country” .
 This will be discussed below.
\end_layout

\begin_layout Standard
The final line calls the save_xml_file method passing the filename and the
 string stored in the variable xml_string (which represent an XML file)
\end_layout

\begin_layout Standard
 
\end_layout

\begin_layout Standard
Now, it’s time to review the implementation of the Rails’ “partial”1 that
 generates the XML string.
  Add the code below to the specified file.
\end_layout

\begin_layout Standard
app/views/recipes/_chart_data_generator_for_count_by_country.builder
\end_layout

\begin_layout Standard
xml.instruct!
\end_layout

\begin_layout Standard
xml.chart :caption => 'Recipies Count by Country' do
\end_layout

\begin_layout Standard
  @recipes_count_by_countries.each do |recipe|
\end_layout

\begin_layout Standard
    xml.set(:label => recipe.country.name, :value => recipe['counter'])
\end_layout

\begin_layout Standard
  end
\end_layout

\begin_layout Standard
end
\end_layout

\begin_layout Standard
Rails “partials” that end with the extension “.builder” instruct rails to
 use “Builder”, which is the XML generator.
  The API documentation can be found at:
\end_layout

\begin_layout Standard
http://api.rubyonrails.org/classes/Builder/XmlMarkup.html
\end_layout

\begin_layout Standard
This code defines a chart XML element (line #2), and then for each instance
 of the collection @recipes_count_by_countries it adds (within XML chart
 element) a set of XML elements that contain both the name of the Country
 and a counter for the number of recipes for the related country.
 
\end_layout

\begin_layout Standard
The following is a sample file generated by that Builder code:
\end_layout

\begin_layout Standard
<?xml version="1.0" encoding="UTF-8"?>
\end_layout

\begin_layout Standard
<chart caption="Recipes Count by Country">
\end_layout

\begin_layout Standard
  <set label="American" value="3"/>
\end_layout

\begin_layout Standard
  <set label="Uruguay" value="2"/>
\end_layout

\begin_layout Standard
  <set label="Mexico" value="3"/>
\end_layout

\begin_layout Standard
  <set label="Italy" value="5"/>
\end_layout

\begin_layout Standard
  <set label="France" value="1"/>
\end_layout

\begin_layout Standard
</chart>
\end_layout

\begin_layout Standard
2.
 Configure the Flash Component to retrieve the generated data
\end_layout

\begin_layout Standard
Now that we have the data needed by our FusionCharts Flash Component, we
 need to instruct our FusionCharts Flash Component, by means of the JavaScript
 API available (thanks to the included file FusionCharts.debug.js), to load
 it.
\end_layout

\begin_layout Standard
See the figure below that includes the code from  recipes/index.dryml that
 demonstrates how we can accomplish that:
\end_layout

\begin_layout Standard
Figure 210: Content of recipes/index.dryml used to render FusionCharts
\end_layout

\begin_layout Standard
We define a div element (with id equal to recipes_count_by_countries), at
 line #8, intended to be the placeholder of the chart.
 
\end_layout

\begin_layout Standard
Next, we make use of the FusionCharts JavaScript API o by creating a FusionChart
s object at line #11.
\end_layout

\begin_layout Standard
The first parameter for the constructor is the particular Chart type that
 we are going to use.
 In this particular case, we will be using a Bar chart.
\end_layout

\begin_layout Standard
The second parameter is used to identify this Chart by name if you are going
 to use advanced features of the JavaScript API.
\end_layout

\begin_layout Standard
The third and forth parameters indicate the dimensions (width and height
 respectively) of the chart.
\end_layout

\begin_layout Standard
Finally, in line #13, we instruct FusionCharts to render the chart within
 the DOM element with id equal to recipes_count_by_countries.
\end_layout

\begin_layout Standard
And that’s it!!! Just go to the browser and request the URL: http://localhost:30
00/recipes, and you’ll see, at the bottom of the view, a chart similar to
 the following:
\end_layout

\begin_layout Standard
Figure 211: Screen shot of rendered FusionCharts bar chart
\end_layout

\begin_layout Standard
Recipes By Category
\end_layout

\begin_layout Standard
Now let’s try a different type of Chart.
 A typical choice would be a pie chart.
 The good news is that it’s pretty much the same effort as the previous
 chart, because it uses the same type of XML data as input.
 For that reason, I’ll be focusing on the differences for this new chart.
\end_layout

\begin_layout Standard
1.
 Save the data to an XML file
\end_layout

\begin_layout Standard
We are going to use the same mechanism presented earlier in this tutorial
 to store the XML file.
 In fact, we’ll be modifying the method save_fusion_chart_data of recipes_contro
ller.rb, this way:
\end_layout

\begin_layout Standard
1   private
\end_layout

\begin_layout Standard
2   def save_fusion_chart_data
\end_layout

\begin_layout Standard
3     @recipes_count_by_countries = Recipe.find(:all, :select => 'country_id,
 count(*) as counter', :group => 'country_id')
\end_layout

\begin_layout Standard
4     filename = "#{RAILS_ROOT}/public/recipes_count_by_countries.xml"
\end_layout

\begin_layout Standard
5     xml_string = render_to_string(:partial => 'chart_data_generator_for_count_
by_country')
\end_layout

\begin_layout Standard
6     save_xml_file(filename, xml_string)
\end_layout

\begin_layout Standard
7     @recipes_count_by_categories = CategoryAssignment.select('category_id,
 count(*) as counter').group('category_id')
\end_layout

\begin_layout Standard
8     filename = "#{RAILS_ROOT}/public/recipes_count_by_categories.xml"
\end_layout

\begin_layout Standard
9     xml_string = render_to_string(:partial => 'chart_data_generator_for_count_
by_categories')
\end_layout

\begin_layout Standard
10    save_xml_file(filename, xml_string)
\end_layout

\begin_layout Standard
11   end
\end_layout

\begin_layout Standard
12   def save_xml_file(filename, data)
\end_layout

\begin_layout Standard
13     FileUtils.rm(filename, :force => true)
\end_layout

\begin_layout Standard
14    f = File.new(filename, 'w')
\end_layout

\begin_layout Standard
15    f.write(data)
\end_layout

\begin_layout Standard
16    f.close
\end_layout

\begin_layout Standard
17   end
\end_layout

\begin_layout Standard
Again, statements marked with bold italics represent the modifications to
 the previous code.
 As you can see, these new lines just implement the same functionality as
 before, but using a different collection as input, this time we are using
 recipes_count_by_categories.
 
\end_layout

\begin_layout Standard
Next, as we did for the previous chart, we define an XML builder as shown
 below:
\end_layout

\begin_layout Standard
recipes/_chart_data_generator_for_count_by_categories.builder
\end_layout

\begin_layout Standard
1 xml.instruct!
\end_layout

\begin_layout Standard
2 xml.chart :caption => 'Recipies Count by Category' do
\end_layout

\begin_layout Standard
3   @recipes_count_by_categories.each do |category_assignment|
\end_layout

\begin_layout Standard
4     xml.set(:label => category_assignment.category.name, :value => category_assig
nment['counter'])
\end_layout

\begin_layout Standard
5   end
\end_layout

\begin_layout Standard
6 end
\end_layout

\begin_layout Standard
You can tell that the only significant difference (apart from the caption
 description), is the way we invoke the model description.
 This is different in both cases because the queries are different.
\end_layout

\begin_layout Standard
After adding this we’ll be generating both XML data files each time a request
 to Recipes index arrives.
\end_layout

\begin_layout Standard
2.
 Configure the Flash Component to retrieve the generated data
\end_layout

\begin_layout Standard
The only thing missing now to render this second chart is to add a placeholder
 for the flash and invoke the proper JavaScript to do the job for us.
 Below we show the last piece of the puzzle:
\end_layout

\begin_layout Standard
Figure 212: The recipe/index.dryml file to render a FusionCharts pie chart
 and bar chart
\end_layout

\begin_layout Standard
And then, we’re done!! Here is the final result:
\end_layout

\begin_layout Standard
Figure 213: Screen shot of the rendered FusionCharts bar and pie charts
\end_layout

\begin_layout Standard
Have fun with FusionCharts!! And explore the different options here:
\end_layout

\begin_layout Standard
http://www.fusioncharts.com/OnlineDocs.asp
\end_layout

\begin_layout Standard
 
\end_layout

\begin_layout Standard
Tutorial 20 – Adding User Comments to Models
\end_layout

\begin_layout Standard
By Tiago Franco
\end_layout

\begin_layout Standard
Tutorial Application:  comments_recipe
\end_layout

\begin_layout Standard
Almost every application on the web allows users to post comments and provide
 feedback to almost every item (books, blog posts, other users, etc).
 This recipe will show you how to support user comments on Hobo.
\end_layout

\begin_layout Standard
Sometimes we want users to post comments to more than one table object.
 For example, suppose that we are developing a social network where users
 can enroll in basketball games and search for courts to play.
 We also want to allow users to post comments to games (e.g., users that didn’t
 win sometimes like to blame the referee) or provide feedback about the
 court (e.g., if it was suitable or not).
 In this recipe we will be adding comments to both games and courts.
 Because we are focused on the comments, we will ignore the attributes of
 games and courts.
\end_layout

\begin_layout Standard
First, create a Hobo application named “comments-recipe”:
\end_layout

\begin_layout Standard
> hobo new comments-recipe --setup
\end_layout

\begin_layout Standard
Now, edit the file config/application.rb and add the following line inside
 the c Class Application < Rails::Application..end block:
\end_layout

\begin_layout Standard
Figure 214: Editing the application name for the Comments Recipe
\end_layout

\begin_layout Standard
We will now add a model class to support the management of basketball games.
 This can be done with the following command:
\end_layout

\begin_layout Standard
> hobo g resource game name:string
\end_layout

\begin_layout Standard
Don’t forget to generate and run the migration.
 This can be done with:
\end_layout

\begin_layout Standard
> hobo g migration --migrate --default-name create_games
\end_layout

\begin_layout Standard
> rake db:migrate
\end_layout

\begin_layout Standard
Let’s run the application to perform a sanity check.
 We expect to see an image similar to the figure below.
  
\end_layout

\begin_layout Standard
Figure 215: Home page for the Comments Recipe
\end_layout

\begin_layout Standard
Notice the games entry on the menu.
 If it is there, it means that the games controller is working fine.
\end_layout

\begin_layout Standard
To add comments support to the application, we need follow similar steps.
 First, we need to create the model with:
\end_layout

\begin_layout Standard
> hobo g resource comment
\end_layout

\begin_layout Standard
We will add the body attribute to hold the text of the user’s comment.
 Edit the file app/models/comment.rb and add the line number 6 as shown by
 the following figure:
\end_layout

\begin_layout Standard
Additionally, add line 10 and 11 from the same figure.
 Line 10 is used to keep track of the user that created the comment, while
 line 11 records the game that is being commented.
\end_layout

\begin_layout Standard
Some applications allow users to edit or delete their comments.
 But they never let a user change comments made by someone else.
 So we need to update the permissions of our comment model.
 Just edit the app/models/comment.rb and make sure the permissions are like
 the ones shown on the figure below:
\end_layout

\begin_layout Standard
Now, we only want users to create, edit or browse comments if a game is
 being shown (i.e.
 in game/show view).
 So we need to update line 5 of app/controllers/comments_controller.rb from:
\end_layout

\begin_layout Standard
auto_actions :all
\end_layout

\begin_layout Standard
To:
\end_layout

\begin_layout Standard
auto_actions :destroy
\end_layout

\begin_layout Standard
The result is shown on the figure below:
\end_layout

\begin_layout Standard
Line 7 also needs to be added, to allow comments to be created from the
 game/show view.
 Without this line the user won’t be able to comment a game when it is being
 displayed.
 Add the line to app/controllers/comments_controller.rb.
\end_layout

\begin_layout Standard
We now need to deal with the game/comment relation on the other end.
 Edit the file app/models/game.rb (and add lines 10, 12):
\end_layout

\begin_layout Standard
We’re just two steps away from testing our new feature: create and run the
 migration.
 
\end_layout

\begin_layout Standard
But we already know how to do that.
 We need to execute the following commands in the command line:
\end_layout

\begin_layout Standard
> hobo g migration --migrate --default-name create_comments
\end_layout

\begin_layout Standard
> rake db:migrate
\end_layout

\begin_layout Standard
And we should be ready for a test drive.
 Create a user account (if you haven’t already done it), create a game and
 add two comments.
 The result should be something similar to:
\end_layout

\begin_layout Standard
Easy isn’t it? So let’s not waste time and start working on the courts!
\end_layout

\begin_layout Standard
Let’s create a model to store the courts on our database.
\end_layout

\begin_layout Standard
> hobo g resource court name:string 
\end_layout

\begin_layout Standard
Because we are not interested in the details of the courts, let’s just create
 and run the migration:
\end_layout

\begin_layout Standard
> hobo g migration --migrate --default-name create_courts
\end_layout

\begin_layout Standard
> rake db:migrate
\end_layout

\begin_layout Standard
Et voila! As we can see in the figure below the application can now store
 courts.
\end_layout

\begin_layout Standard
Figure 221: Comments' Recipe with support for courts
\end_layout

\begin_layout Standard
Now we need to update the existing infrastructure to allow users to comment
 the courts.
 Since we already have a comment model, let’s just make a few updates so
 that it can also be related with a court.
\end_layout

\begin_layout Standard
First, we need to update the existing comment model.
 Add the contents of line 12 on figure below to the file app/models/comment.rb.
 This will allow a comment to be related with a court.
\end_layout

\begin_layout Standard
Figure 222: Adding courts to comments
\end_layout

\begin_layout Standard
Then update the court model, file app/models/court.rb, to deal with the other
 end of the one-to-many relationship.
 Update the file with the contents of line 10 and line 12:
\end_layout

\begin_layout Standard
We now need to update the CommentsController to allow the creation of comments
 in the court/show page.
 Add line 8 as seen in the figure below to the file app/controllers/comments_con
troller.rb.
\end_layout

\begin_layout Standard
Figure 224: Modifying auto_actions for the comments_controller (allow court)
\end_layout

\begin_layout Standard
Finally, create and run the migrations using the following commands:
\end_layout

\begin_layout Standard
> hobo g migration --migrate --default-name add_comments_to_courts
\end_layout

\begin_layout Standard
> rake db:migrate
\end_layout

\begin_layout Standard
Now, create a court and insert a new comment.
 It seems that the application is asking to add a game to the comment.
 By default Hobo auto-generates forms to fill every attribute on the model.
 We need to tell the framework not to show the game list-box on the new
 comment form.
 
\end_layout

\begin_layout Standard
This can be performed by adding line 14 below comment.rb (app/models).
\end_layout

\begin_layout Standard
Figure 225: Hiding court and game in the comment's form
\end_layout

\begin_layout Standard
Now you will be able to see something like the following:
\end_layout

\begin_layout Standard
Figure 226: View of the in-line "Add a Comment" form
\end_layout

\begin_layout Standard
In this recipe we have learned how to support comments to the application
 models.
 The example was performed with games and courts, but can easily be mapped
 to any Hobo based application in the wild.
\end_layout

\begin_layout Standard
Tutorial 21 – Replicating the Look and Feel of a Site
\end_layout

\begin_layout Standard
By Tom Locke
\end_layout

\begin_layout Standard
Introduction
\end_layout

\begin_layout Standard
Say we want a new Hobo app to have the same look-and-feel of an existing
 site.
 The really big win is if we can have this look and feel happen to our new
 app almost ‘automatically’.
 We want to be able to develop at “Hobo speed”, and have the look and feel
 “just happen”.
 This is not trivial to set up, but once it is, the payback in terms of
 development agility will be more than worth it.
 That is the topic of this chapter.
\end_layout

\begin_layout Standard
We’ll use the example of the standard web design used throughout all agencies
 within the U.S.
 Department of Agriculture.
 The authors have done substantial work with NIFA, The Cooperative State
 Research, Education, and Extension Service, so we will use their website
 (www.nifa.usda.gov) as an example:
\end_layout

\begin_layout Standard
 
\end_layout

\begin_layout Standard
Figure 228: Screen shot of the nifa.usda.gov home page
\end_layout

\begin_layout Standard
Note that, for now at least, this recipe will document how to create a close
 approximation to this theme.
 In particular, we’re going to skip some of the details that cannot be implement
ed without resorting to images.
 This is just to keep the recipe getting too long and complicated.
\end_layout

\begin_layout Standard
This will be as much a guide to general web-development best practices as
 it will be a lesson in Hobo and DRYML.
 The mantra when working with themes in Hobo is something already familiar
 to skilled web developers:
\end_layout

\begin_layout Standard
Separate content from presentation
\end_layout

\begin_layout Standard
The vast majority of common mistakes that are made in styling a web-app
 come under this heading.
 If this one idea can be understood and applied, you’re well on the way
 to:
\end_layout

\begin_layout Standard
Having the look-and-feel “just happen” as your site changes and evolves
\end_layout

\begin_layout Standard
Being able to change the theme in the future, without having to modify the
 app
\end_layout

\begin_layout Standard
Since CSS has been widely adopted, most web developers are familiar with
 this principle.
 So this is probably just a recap, but as a reminder about how this works:
\end_layout

\begin_layout Standard
“Content” describes what is on the page, but not what it will look like.
 In a Hobo app content comes from tag definitions, page templates and the
 application’s data of course.
\end_layout

\begin_layout Standard
“Presentation” describes how the page should look.
 That is, it describes fonts, colors, margins, borders, images and so on.
 In a Hobo app the presentation is handled essentially the same way as with
 any app, with CSS stylesheets and image assets.
\end_layout

\begin_layout Standard
Having said that, we need to inject a note of pragmatism:
\end_layout

\begin_layout Standard
Humans being visual animals, information can never truly be separated from
 the way it is displayed.
 The line is sometimes blurred and there are often judgment calls to be
 made.
\end_layout

\begin_layout Standard
The technologies we’ve got to work with, in particular cross-browser support
 for CSS, are far from perfect.
 Sometimes we have to compromise.
\end_layout

\begin_layout Standard
There’s probably an entire PhD thesis lurking in that first point, but let’s
 move on!
\end_layout

\begin_layout Standard
The current site
\end_layout

\begin_layout Standard
We’ll start with a look at the elements of the existing site that we’ll
 need to replicate.
 The main ones are:
\end_layout

\begin_layout Standard
A banner image:
\end_layout

\begin_layout Standard
 
\end_layout

\begin_layout Standard
A photo image that fits below the banner image:
\end_layout

\begin_layout Standard
Figure 230: The NIFA photo image
\end_layout

\begin_layout Standard
The main navigation bar:
\end_layout

\begin_layout Standard
 
\end_layout

\begin_layout Standard
A couple of styles of navigation panels:
\end_layout

\begin_layout Standard
 
\end_layout

\begin_layout Standard
And more navigation in the page footer:
\end_layout

\begin_layout Standard
 
\end_layout

\begin_layout Standard
One of the important things to notice at this stage, is that this is not
 just a “theme” in the Hobo sense of the word.
 Hobo themes are purely about presentation, whereas the “look and feel”
 of this site is a mixture of content elements and presentation.
\end_layout

\begin_layout Standard
That means we’re going to be creating three things to capture this look-and-feel
:
\end_layout

\begin_layout Standard
Tag Definitions
\end_layout

\begin_layout Standard
A CSS stylesheet
\end_layout

\begin_layout Standard
Some image assets.
\end_layout

\begin_layout Standard
The current markup
\end_layout

\begin_layout Standard
The existing site makes extensive use of HTML tables for layout, and the
 various images in the page are present in the markup as <img> tags.
 In other words, the existing markup is very presentational.
\end_layout

\begin_layout Standard
So rather than create tag definitions out of the existing markup, we’ll
 be recreating the site using clean, semantic markup and CSS.
\end_layout

\begin_layout Standard
The other advantage of re-creating the markup is that it will be easier
 to follow Hobo conventions.
 There’s no particular need to do this, but it makes it a great deal easier
 to jump from one Hobo app to the next.
\end_layout

\begin_layout Standard
Building the new app
\end_layout

\begin_layout Standard
Let’s do this properly and actually follow along in a blank Hobo app.
 At the end of the recipe we’ll see how we could package this look-and-feel
 up and re-use it another app.
 To follow along, you should use Firefox and the Firebug extension you can
 find at http://getfirebug.com.
\end_layout

\begin_layout Standard
> hobo nifa-demo
\end_layout

\begin_layout Standard
> cd nifa-demo
\end_layout

\begin_layout Standard
> hobo g migration
\end_layout

\begin_layout Standard
If you fire up the server, you’ll see the default Hobo app of course:
\end_layout

\begin_layout Standard
Figure 234: The NIFA Demo default home page
\end_layout

\begin_layout Standard
First thing to do is change the heading “Nifa” to “NIFA” in 
\backslash
views
\backslash
taglibs
\backslash
applicationl.dryml since it is an acronym for the National Institute of Food
 and Agriculture:
\end_layout

\begin_layout Standard
Figure 235: Using the "app-name" tag to change the default application name
\end_layout

\begin_layout Standard
Now we can start to make it look like the page we’re after.
 We’ll take it step by step.
\end_layout

\begin_layout Standard
Main background and width
\end_layout

\begin_layout Standard
With the Firebug add-on for Firefox I can tell that the NIFA background
 color is #A8ACB7:
\end_layout

\begin_layout Standard
Figure 236: Using Firebug to locate the background color
\end_layout

\begin_layout Standard
Now switching to the Hobo NIFA Demo application, Firebug tells us (click
 the inspect button, then click on the background) that the CSS rule that
 sets the current background comes from clean.css and looks like:
\end_layout

\begin_layout Standard
Figure 237: Using Firebug to find the images used by Hobo for the default
 background
\end_layout

\begin_layout Standard
Anything we add to application.css (it is empty by default) will override
 clean.css.
 So I’m going to add this rule to  public/stylesheets/application.css:
\end_layout

\begin_layout Standard
html, body { background:#A8ACB7 }
\end_layout

\begin_layout Standard
Figure 238: Adding the new background color to "application.css"
\end_layout

\begin_layout Standard
Again, using Firebug on the NIFA Demo app (by clicking on the <body> tag
 in the HTML window) I can see that the width is set on the body tag:
\end_layout

\begin_layout Standard
body { ...
 width: 960px; ...
 }
\end_layout

\begin_layout Standard
Back in NIFA, I can right click the banner image and chose “View Image”,
 and Firefox tells me its width is 766 pixels.
 So in application.css I add
\end_layout

\begin_layout Standard
body { width: 766px; }
\end_layout

\begin_layout Standard
Note we’ve not changed any markup yet - that’s how we like it.
\end_layout

\begin_layout Standard
Account navigation
\end_layout

\begin_layout Standard
These are the log-in and sign-up links in the top right.
 They are not on the NIFA site, but if the app needed them, the place they
 are in now would be fine, so we’ll leave them where they are.
\end_layout

\begin_layout Standard
Search
\end_layout

\begin_layout Standard
The page header has a search-field that we don’t want.
 To get rid of this we’ll customize the <page> tag.
 We need to do this in application.dryml:
\end_layout

\begin_layout Standard
Figure 239: First pass at modifying "application.dryml"
\end_layout

\begin_layout Standard
<extend tag="page">
\end_layout

\begin_layout Standard
  <old-page merge without-live-search>
\end_layout

\begin_layout Standard
  </old-page>
\end_layout

\begin_layout Standard
</extend>
\end_layout

\begin_layout Standard
So now we have made a change to the markup, but that makes perfect sense,
 because here we wanted to change what’s on the page not what stuff looks
 like.
\end_layout

\begin_layout Standard
The Banner
\end_layout

\begin_layout Standard
Again, using Firefox’s “View Image”, it turns out that the existing banner
 is in fact two images.
 
\end_layout

\begin_layout Standard
This one:
\end_layout

\begin_layout Standard
And this one:
\end_layout

\begin_layout Standard
To add these images without changing the markup, we need to use CSS’s background
-image feature.
 One major limitation of CSS is that you can only have one background image
 per element.
 That won’t be a problem, but to understand our approach, first take a look
 at a simplified view of the page markup that we’re working with:
\end_layout

\begin_layout Standard
<html>
\end_layout

\begin_layout Standard
  <head>...</head>
\end_layout

\begin_layout Standard
  <body>
\end_layout

\begin_layout Standard
    <div class="page-header">
\end_layout

\begin_layout Standard
      <h1 class="app-name">NIFA Demo</h1>
\end_layout

\begin_layout Standard
    </div>
\end_layout

\begin_layout Standard
    ...
\end_layout

\begin_layout Standard
  </body>
\end_layout

\begin_layout Standard
</html>
\end_layout

\begin_layout Standard
Notice that this image:
\end_layout

\begin_layout Standard
Is essentially a graphical version of that <h1> tag, so we’ll use CSS to
 make that same <h1> be rendered as an image.
 The existing text will be hidden, by moving it way out of the way with
 a text-indent rule.
 First we need to save that image into our public/images folder.
 
\end_layout

\begin_layout Standard
The CSS to add to application.css is:
\end_layout

\begin_layout Standard
div.page-header { padding: 0; }
\end_layout

\begin_layout Standard
div.page-header h1.app-name {
\end_layout

\begin_layout Standard
    text-indent: -10000px;
\end_layout

\begin_layout Standard
    background: url(..
\backslash
images
\backslash
banner_nifa.gif) no-repeat;
\end_layout

\begin_layout Standard
    padding: 0; margin: 0;
\end_layout

\begin_layout Standard
    height: 62px;
\end_layout

\begin_layout Standard
}
\end_layout

\begin_layout Standard
Figure 241: How to reference the banner gif in "application.css"
\end_layout

\begin_layout Standard
OK that was a bit of a leap.
 Why padding: 0px for the page-header, for example? The fact of the matter
 is that working with CSS is all about trial and error.
 Using Firebug to figure out what rules are currently in effect, flipping
 back and forth between the stylesheet in your editor and the browser.
 Try experimenting by taking some of those rules out and you’ll see why
 each is needed.
\end_layout

\begin_layout Standard
Now for the photo part of the banner.
 Again, save it to public/images, then add some extra properties to the
 div.page-header selector, so it ends up like:
\end_layout

\begin_layout Standard
div.page-header {
\end_layout

\begin_layout Standard
    padding: 0; 
\end_layout

\begin_layout Standard
    background: url(..
\backslash
images
\backslash
banner_photo.jpg) no-repeat 0px 62px;
\end_layout

\begin_layout Standard
    height: 106px;
\end_layout

\begin_layout Standard
}
\end_layout

\begin_layout Standard
Figure 242: View of the NIFA Demo login page
\end_layout

\begin_layout Standard
Taking shape now, except the main navigation panel (“Home” tag) is hovering
 on top of the photos:
\end_layout

\begin_layout Standard
Figure 243: The Navigation Panel before refactoring
\end_layout

\begin_layout Standard
Navigation
\end_layout

\begin_layout Standard
The existing navigation bar is created entirely with images.
 It’s quite common to do this, as it gives total control over fonts, borders,
 and other visual effects such as color gradients.
 The downside is that you have to fire up your image editor every time there’s
 a change to the navigation.
\end_layout

\begin_layout Standard
This doesn’t sit very well with our goal to be able to make changes quickly
 and easily.
 So for this recipe we’re going to go implement the navigation bar without
 resorting to images.
 We’ll lose the bevel effect, but some might think the end result is actually
 better - cleaner, clearer and more professional looking.
 
\end_layout

\begin_layout Standard
Our app only has a home page right now, so first let’s define a fake navigation
 bar to work with.
 In application.dryml:
\end_layout

\begin_layout Standard
<def tag="main-nav">
\end_layout

\begin_layout Standard
  <navigation class="main-nav">
\end_layout

\begin_layout Standard
    <nav-item href="">Home</nav-item>
\end_layout

\begin_layout Standard
    <nav-item href="">About Us</nav-item>
\end_layout

\begin_layout Standard
    <nav-item href="">Grants</nav-item>
\end_layout

\begin_layout Standard
    <nav-item href="">Forms</nav-item>
\end_layout

\begin_layout Standard
    <nav-item href="">Newsroom</nav-item>
\end_layout

\begin_layout Standard
    <nav-item href="">Help</nav-item>
\end_layout

\begin_layout Standard
    <nav-item href="">Contact Us</nav-item>
\end_layout

\begin_layout Standard
  </navigation>  
\end_layout

\begin_layout Standard
</def>
\end_layout

\begin_layout Standard
Figure 244: View of our first pass at the main navigation menu
\end_layout

\begin_layout Standard
Use Firebug’s “Inspect” button to find the navigation bar.
 You’ll see that it’s rendered as a <ul> list, which is generally considered
 good practice; it is a list of links after all.
 There are several things wrong with the appearance of the navigation at
 this point:
\end_layout

\begin_layout Standard
It’s in the wrong place - we want to move it down and to the right.
\end_layout

\begin_layout Standard
Needs to be shorter, and the spacing of the items needs fixing
\end_layout

\begin_layout Standard
The font needs to be smaller, and not bold
\end_layout

\begin_layout Standard
The background color needs to change, as do the colors when you mouse-over
 a link
\end_layout

\begin_layout Standard
Now this is not a CSS tutorial, so we’re not going to explain every last
 detail, but we’ll build it up in a few steps which will help to illustrate
 what does what.
 First update the rules for div.page-header in application.css so they look
 like:
\end_layout

\begin_layout Standard
div.page-header {
\end_layout

\begin_layout Standard
    padding: 0; 
\end_layout

\begin_layout Standard
    background: white url(..
\backslash
images
\backslash
banner_photo.jpg) no-repeat 0px 62px;
\end_layout

\begin_layout Standard
    height: 138px;
\end_layout

\begin_layout Standard
}
\end_layout

\begin_layout Standard
And add:
\end_layout

\begin_layout Standard
div.page-header .main-nav {
\end_layout

\begin_layout Standard
    position: absolute; bottom: 0; right: 0; 
\end_layout

\begin_layout Standard
}
\end_layout

\begin_layout Standard
Figure 245: Still need more to fix the top navigation menu...
\end_layout

\begin_layout Standard
The nav-bar still looks wrong.
  We’ll now fix the sizing and placement.
 Update the new rule (div.page-header .main-nav) and add new ones, and colors.
  The entire application.css looks  like this so far:
\end_layout

\begin_layout Standard
html, body { background:#A8ACB6 }
\end_layout

\begin_layout Standard
body { width: 766px; }
\end_layout

\begin_layout Standard
 
\end_layout

\begin_layout Standard
div.page-header {
\end_layout

\begin_layout Standard
    padding: 0;
\end_layout

\begin_layout Standard
    background: white url(../images/banner_photo.jpg) no-repeat 0px 62px;
\end_layout

\begin_layout Standard
    height: 138px;
\end_layout

\begin_layout Standard
}
\end_layout

\begin_layout Standard
 
\end_layout

\begin_layout Standard
div.page-header h1.app-name {
\end_layout

\begin_layout Standard
    text-indent: -10000px;
\end_layout

\begin_layout Standard
    background: url(../images/banner_nifa.gif) no-repeat;
\end_layout

\begin_layout Standard
    padding: 0; margin: 0;
\end_layout

\begin_layout Standard
    height: 55px;
\end_layout

\begin_layout Standard
}
\end_layout

\begin_layout Standard
 
\end_layout

\begin_layout Standard
div.page-header .main-nav { 
\end_layout

\begin_layout Standard
    position: relative; 
\end_layout

\begin_layout Standard
	top: 63px; 
\end_layout

\begin_layout Standard
    height: 21px; 
\end_layout

\begin_layout Standard
	width: 100%; 
\end_layout

\begin_layout Standard
	line-height: 21px; 
\end_layout

\begin_layout Standard
	padding: 0;  
\end_layout

\begin_layout Standard
    text-align: right;  
\end_layout

\begin_layout Standard
    background: #313367;  
\end_layout

\begin_layout Standard
} 
\end_layout

\begin_layout Standard
 
\end_layout

\begin_layout Standard
div.page-header .main-nav li { 
\end_layout

\begin_layout Standard
    margin: 0; 
\end_layout

\begin_layout Standard
	padding: 0 0 0 4px; 
\end_layout

\begin_layout Standard
    display:inline; 
\end_layout

\begin_layout Standard
	float:none; 
\end_layout

\begin_layout Standard
    border-left: 1px dotted #eee; 
\end_layout

\begin_layout Standard
	background: #313367; 
\end_layout

\begin_layout Standard
    color: silver; 	
\end_layout

\begin_layout Standard
} 
\end_layout

\begin_layout Standard
 
\end_layout

\begin_layout Standard
div.page-header .navigation.main-nav li a { 
\end_layout

\begin_layout Standard
    padding: 3px 8px; 
\end_layout

\begin_layout Standard
	margin: 0; 
\end_layout

\begin_layout Standard
    font-weight: normal; 
\end_layout

\begin_layout Standard
	display:inline; 
\end_layout

\begin_layout Standard
	font-size: 12px; 
\end_layout

\begin_layout Standard
    background: #313367;
\end_layout

\begin_layout Standard
    color: silver; 	
\end_layout

\begin_layout Standard
} 
\end_layout

\begin_layout Standard
div.page-header .navigation.main-nav li.current a {
\end_layout

\begin_layout Standard
    background: #313367;
\end_layout

\begin_layout Standard
    color: white; 	
\end_layout

\begin_layout Standard
}
\end_layout

\begin_layout Standard
 
\end_layout

\begin_layout Standard
div.page-header .navigation.main-nav li a:hover { 
\end_layout

\begin_layout Standard
	 background: #A9BACF;
\end_layout

\begin_layout Standard
	  color: black;
\end_layout

\begin_layout Standard
	
\end_layout

\begin_layout Standard
}
\end_layout

\begin_layout Standard
Note that we had to make the last two selectors a bit more specific, in
 order to ensure that they take precedence over rules in the “Clean” theme.
\end_layout

\begin_layout Standard
The page header should be done at this point:
\end_layout

\begin_layout Standard
Figure 246: The fixed NIFA man navigation bar
\end_layout

\begin_layout Standard
The sidebars
\end_layout

\begin_layout Standard
The existing site has both left and right sidebars.
 We’ll add those now.
 The first step is to add the three content sections to the <page> tag in
 application.dryml.
 We’ve already extended <page>, so modify the DRYML you already have to
 look like:
\end_layout

\begin_layout Standard
<extend tag="page">
\end_layout

\begin_layout Standard
  <old-page merge without-live-search>
\end_layout

\begin_layout Standard
    <content: replace>
\end_layout

\begin_layout Standard
      <section-group class="page-content">
\end_layout

\begin_layout Standard
        <aside param="aside1"/>
\end_layout

\begin_layout Standard
        <section param="content"/>
\end_layout

\begin_layout Standard
        <aside param="aside2"/>
\end_layout

\begin_layout Standard
      </section-group>
\end_layout

\begin_layout Standard
    </content:>
\end_layout

\begin_layout Standard
  </old-page>
\end_layout

\begin_layout Standard
</extend>
\end_layout

\begin_layout Standard
We’ve replaced the existing <content:> with a <section-group> that contains
 our two <aside> tags and the main <section>.
\end_layout

\begin_layout Standard
To try this out, we’ll insert some dummy content in app/views/front/index.dryml.
 Edit that file as follows:
\end_layout

\begin_layout Standard
<page title="Home">
\end_layout

\begin_layout Standard
  <body: class="front-page"/>
\end_layout

\begin_layout Standard
  <aside1:>Aside 1</aside1:>
\end_layout

\begin_layout Standard
  <content:>Main content</content:>
\end_layout

\begin_layout Standard
  <aside2:>Aside 2</aside2:>
\end_layout

\begin_layout Standard
</page>
\end_layout

\begin_layout Standard
You should see something like:
\end_layout

\begin_layout Standard
Figure 247: View of the default three-column formatting
\end_layout

\begin_layout Standard
Obviously we’ve got a bunch of styling to do.
 First though, let’s add the content for the left sidebar.
 This is the “search and browse” panel, which is on every page of the site,
 so let’s define it as a tag in application.dryml:
\end_layout

\begin_layout Standard
<def tag="search-and-browse" attrs="current-subject"> 
\end_layout

\begin_layout Standard
  <div class="search-and-browse"> 
\end_layout

\begin_layout Standard
    <div param="search"> 
\end_layout

\begin_layout Standard
      <h3>Search NIFA</h3> 
\end_layout

\begin_layout Standard
      <form action=""> 
\end_layout

\begin_layout Standard
        <input type="text" class="search-field"/> 
\end_layout

\begin_layout Standard
        <submit label="Go"/> 
\end_layout

\begin_layout Standard
      </form> 
\end_layout

\begin_layout Standard
      <p class="help"><a href="">Search Help</a></p> 
\end_layout

\begin_layout Standard
    </div> 
\end_layout

\begin_layout Standard
    <div param="browse-by-audience"> 
\end_layout

\begin_layout Standard
      <h3>Browse by Audience</h3> 
\end_layout

\begin_layout Standard
      <select-menu first-option="Information for..." options="&[]"/>   
\end_layout

\begin_layout Standard
    </div> 
\end_layout

\begin_layout Standard
    <div param="browse-by-subject"> 
\end_layout

\begin_layout Standard
      <h3>Browse by Subject</h3> 
\end_layout

\begin_layout Standard
      <navigation current="&current_subject"> 
\end_layout

\begin_layout Standard
        <nav-item href="/">Agricultural &amp; Food Biosecurity</nav-item>
 
\end_layout

\begin_layout Standard
        <nav-item href="/">Agricultural Systems</nav-item> 
\end_layout

\begin_layout Standard
        <nav-item href="/">Animals &amp; Animal Products</nav-item> 
\end_layout

\begin_layout Standard
        <nav-item href="/">Biotechnology &amp; Geneomics</nav-item> 
\end_layout

\begin_layout Standard
        <nav-item href="/">Economy &amp; Commerce</nav-item> 
\end_layout

\begin_layout Standard
        <nav-item href="/">Education</nav-item> 
\end_layout

\begin_layout Standard
        <nav-item href="/">Families, Youth &amp; Communities</nav-item>
 
\end_layout

\begin_layout Standard
      </navigation> 
\end_layout

\begin_layout Standard
    </div> 
\end_layout

\begin_layout Standard
  </div>
\end_layout

\begin_layout Standard
</def>
\end_layout

\begin_layout Standard
A few points to note about that markup:
\end_layout

\begin_layout Standard
We’ve tried to make the markup as “semantic” as possible – it describes
 what the content is, not what it looks like.
\end_layout

\begin_layout Standard
We’ve added a few params, so that individual pages can customize the search-and-
browse panel.
 Each param also gives us a CSS class of the same name, so we can target
 those in our stylesheet.
\end_layout

\begin_layout Standard
We’ve used <navigation> for the browse-by-subject links.
 This gives us the ability to highlight the current page as the user browses.
\end_layout

\begin_layout Standard
Because the search-and-browse panel appears on every page, lets call it
 from our master page tag (<extend tag="page">).
 Change:
\end_layout

\begin_layout Standard
<aside param="aside1"/>
\end_layout

\begin_layout Standard
To:
\end_layout

\begin_layout Standard
<aside param="aside1"><search-and-browse/></aside>
\end_layout

\begin_layout Standard
Then remove the <aside1:>Aside 1</aside1:> parameter from front/index.dryml.
\end_layout

\begin_layout Standard
Figure 248: View of the left panel contact without styling
\end_layout

\begin_layout Standard
Now we need to style this panel.
 After a good deal of experimentation, we get to the following CSS:
\end_layout

\begin_layout Standard
div.page-content, div.page-content .aside { background: white; }
\end_layout

\begin_layout Standard
.aside1 { width: 173px; padding: 10px;}
\end_layout

\begin_layout Standard
.search-and-browse {
\end_layout

\begin_layout Standard
    background: #A9BACF;
\end_layout

\begin_layout Standard
    border: 1px solid #313367;
\end_layout

\begin_layout Standard
    font-size: 11px;
\end_layout

\begin_layout Standard
    margin: 4px;
\end_layout

\begin_layout Standard
}
\end_layout

\begin_layout Standard
.search-and-browse h3 {
\end_layout

\begin_layout Standard
    background: #313367; color: white;
\end_layout

\begin_layout Standard
    margin: 0; padding: 3px 5px;
\end_layout

\begin_layout Standard
    font-weight: normal; font-size: 13px; 
\end_layout

\begin_layout Standard
}
\end_layout

\begin_layout Standard
.search-and-browse a { background: none; color: #000483;}
\end_layout

\begin_layout Standard
.search-and-browse .navigation { list-style-type: circle; }
\end_layout

\begin_layout Standard
.search-and-browse .navigation li { padding: 3px 0; font-size: 11px; line-height:
 14px;}
\end_layout

\begin_layout Standard
.search-and-browse .navigation li a { border:none;}
\end_layout

\begin_layout Standard
.search-and-browse .search form { margin: 0 3px 3px 3px;}
\end_layout

\begin_layout Standard
.search-and-browse .search p { margin: 3px;}
\end_layout

\begin_layout Standard
.search-and-browse .search-field { width: 120px;}
\end_layout

\begin_layout Standard
.search-and-browse .submit-button { padding: 2px;}
\end_layout

\begin_layout Standard
.search-and-browse .browse-by-audience select { margin: 5px 3px; width: 92%;}
\end_layout

\begin_layout Standard
With that added to application.css you should see:
\end_layout

\begin_layout Standard
Figure 249: View of the left panel content with correct styling
\end_layout

\begin_layout Standard
OK - let’s switch to the right-hand sidebar.
\end_layout

\begin_layout Standard
If you click around the site you’ll see the right sidebar is always used
 for navigation panels, like this one:
\end_layout

\begin_layout Standard
You’ll also notice it’s missing from some pages, which is as easy as:
\end_layout

\begin_layout Standard
<page without-aside2/>
\end_layout

\begin_layout Standard
It seems like a good idea to define a tag that creates one of these panels,
 say:
\end_layout

\begin_layout Standard
<nav-panel>
\end_layout

\begin_layout Standard
  <heading:>Quick Links</heading:>
\end_layout

\begin_layout Standard
  <items:>
\end_layout

\begin_layout Standard
    <nav-item href="/">A-Z Index</nav-item>
\end_layout

\begin_layout Standard
    <nav-item href="/">Local Extension Office</nav-item>
\end_layout

\begin_layout Standard
    <nav-item href="/">Jobs and Opportunities</nav-item>
\end_layout

\begin_layout Standard
  </items:>
\end_layout

\begin_layout Standard
</nav-panel>
\end_layout

\begin_layout Standard
We’ve re-used the <nav-item> tag as it gives us an <li> and an <a> which
 is just what we need here.
\end_layout

\begin_layout Standard
Now add the definition of <nav-panel> to your application.dryml:
\end_layout

\begin_layout Standard
<def tag="nav-panel">
\end_layout

\begin_layout Standard
  <div class="nav-panel" param="default">
\end_layout

\begin_layout Standard
    <h3 param="heading"></h3>
\end_layout

\begin_layout Standard
    <div param="body">
\end_layout

\begin_layout Standard
      <ul param="items"/>
\end_layout

\begin_layout Standard
    </div>
\end_layout

\begin_layout Standard
  </div>
\end_layout

\begin_layout Standard
</def>
\end_layout

\begin_layout Standard
Notice that we defined two parameters for the body of the panel.
 Callers can either provide the <items:> parameter, in which case the <ul>
 wrapper is provided, or, in the situation where the body will not be a
 single <ul>, they can provide the <body:> parameter.
\end_layout

\begin_layout Standard
OK let’s throw one of these things into our page.
 Here’s what front/index.dryml needs to look like:
\end_layout

\begin_layout Standard
<page title="Home">
\end_layout

\begin_layout Standard
  <body: class="front-page"/>
\end_layout

\begin_layout Standard
  <content:>Main content</content:>
\end_layout

\begin_layout Standard
  <aside2:>
\end_layout

\begin_layout Standard
    <nav-panel>
\end_layout

\begin_layout Standard
      <heading:>Grants</heading:>
\end_layout

\begin_layout Standard
      <items:>
\end_layout

\begin_layout Standard
        <nav-item href="/">National Research Initiative</nav-item>
\end_layout

\begin_layout Standard
        <nav-item href="/">Small Business Innovation Research</nav-item>
\end_layout

\begin_layout Standard
        <nav-item href="/">More...</nav-item>
\end_layout

\begin_layout Standard
      </items:>
\end_layout

\begin_layout Standard
    </nav-panel>
\end_layout

\begin_layout Standard
    <nav-panel>
\end_layout

\begin_layout Standard
      <heading:>Quick Links</heading:>
\end_layout

\begin_layout Standard
      <items:>
\end_layout

\begin_layout Standard
        <nav-item href="/">A-Z Index</nav-item>
\end_layout

\begin_layout Standard
        <nav-item href="/">Local Extension Office</nav-item>
\end_layout

\begin_layout Standard
        <nav-item href="/">Jobs and Opportunities</nav-item>
\end_layout

\begin_layout Standard
      </items:>
\end_layout

\begin_layout Standard
    </nav-panel>
\end_layout

\begin_layout Standard
  </aside2:>
\end_layout

\begin_layout Standard
</page>
\end_layout

\begin_layout Standard
And here’s the associated CSS – add this to the end of your application.css:
\end_layout

\begin_layout Standard
.aside2 { margin: 0; padding: 12px 10px; width: 182px;}
\end_layout

\begin_layout Standard
.nav-panel {border: 1px solid #C9C9C9; margin-bottom: 10px;}
\end_layout

\begin_layout Standard
.nav-panel h3 {background:#A9BACF; color: #313131; font-size: 13px; padding:
 3px 8px; margin: 0;}
\end_layout

\begin_layout Standard
.nav-panel .body {background: #DAE4ED; color: #00059A; padding: 5px;}
\end_layout

\begin_layout Standard
.nav-panel .body a {color: #00059A; background: none;}
\end_layout

\begin_layout Standard
.nav-panel ul {list-style-type: circle;}
\end_layout

\begin_layout Standard
.nav-panel ul li { margin: 5px 0 5px 20px;}
\end_layout

\begin_layout Standard
Figure 250: View of the right panel content with styling
\end_layout

\begin_layout Standard
Main content
\end_layout

\begin_layout Standard
The main content varies a lot from page to page, so let’s just make sure
 that the margins are OK, and leave it at that.
 First we need some content to work with, so in front/index.dryml, replace:
\end_layout

\begin_layout Standard
<content:>Main content</content:>
\end_layout

\begin_layout Standard
With:
\end_layout

\begin_layout Standard
<content:>
\end_layout

\begin_layout Standard
  <h2>National Institute of Food and Agriculture</h2>
\end_layout

\begin_layout Standard
  <p>Main content goes here...</p>
\end_layout

\begin_layout Standard
</content:>
\end_layout

\begin_layout Standard
On refreshing the browser it seems there’s nothing else to do.
 This looks fine:
\end_layout

\begin_layout Standard
Figure 251: View of the main content panel
\end_layout

\begin_layout Standard
The footer
\end_layout

\begin_layout Standard
The footer is the same throughout the site.
 Let’s define it as a tag and add it to our main <page> tag.
 Here’s the definition for application.dryml:
\end_layout

\begin_layout Standard
<def tag="footer-nav">
\end_layout

\begin_layout Standard
     <ul>
\end_layout

\begin_layout Standard
      	<nav-item href="/">NIFA</nav-item>
\end_layout

\begin_layout Standard
      	<nav-item href="/">USDA.gov</nav-item>
\end_layout

\begin_layout Standard
      	<nav-item href="/">Site Map</nav-item>
\end_layout

\begin_layout Standard
      	<nav-item href="/">Policies and Links</nav-item>
\end_layout

\begin_layout Standard
      	<nav-item href="/">Grants.gov</nav-item>
\end_layout

\begin_layout Standard
		<nav-item href="/">CRIS</nav-item>
\end_layout

\begin_layout Standard
		<nav-item href="/">REEIS</nav-item>
\end_layout

\begin_layout Standard
		<nav-item href="/">Leadership Management Dashboard</nav-item>
\end_layout

\begin_layout Standard
		<nav-item href="/">eXension</nav-item>
\end_layout

\begin_layout Standard
      	<nav-item href="/">RSS</nav-item>
\end_layout

\begin_layout Standard
    </ul>
\end_layout

\begin_layout Standard
/def>
\end_layout

\begin_layout Standard
And add this parameter to the <extend tag="page">:
\end_layout

\begin_layout Standard
<footer: param><footer-nav/></footer:>
\end_layout

\begin_layout Standard
Note: Since Hobo already includes a page-footer div out-of-the-box, we don’t
 need to create this div in DRYML.
  If we did, we would end up with a duplicate and this would distort the
 footer.
 
\end_layout

\begin_layout Standard
And finally, the CSS.
 To get the corner graphic that we’ve used here, you need to right-click
 and “Save Image As” on the bottom left corner in the existing site:
\end_layout

\begin_layout Standard
.page-footer {
\end_layout

\begin_layout Standard
    background: white url(../images/footer_corner_left.gif) no-repeat bottom
 left;
\end_layout

\begin_layout Standard
    overflow: hidden; height: 100%;
\end_layout

\begin_layout Standard
    border-top: 1px solid #B8B8B8;
\end_layout

\begin_layout Standard
    font-size: 12px; line-height: 10px;
\end_layout

\begin_layout Standard
    padding: 5px 0px 10px 40px;
\end_layout

\begin_layout Standard
}
\end_layout

\begin_layout Standard
.page-footer ul { list-style-type: none; }
\end_layout

\begin_layout Standard
.page-footer ul li { float: left; border-right: 1px solid #2A049A; margin:
 0; padding: 0 5px;}
\end_layout

\begin_layout Standard
.page-footer ul li a {border:none; color: #2A049A;}
\end_layout

\begin_layout Standard
There’s one CSS trick in there that is work a mention.
 In the .page-footer section, we’ve specified:
\end_layout

\begin_layout Standard
overflow: hidden; height: 100%;
\end_layout

\begin_layout Standard
This is the famous “self clearing” trick.
 Because all the content in the footer is floated, without this trick the
 footer looses its height.
\end_layout

\begin_layout Standard
Figure 252: NIFA Demo with final footer styling
\end_layout

\begin_layout Standard
That pretty much brings us to the end of the work of reproducing the look
 and feel.
 We should now be able to build out our application, and it will look right
 “automatically”.
 In practice you always run into small problems here and there and need
 to dive back into CSS to tweak things, but the bulk of the job is done.
\end_layout

\begin_layout Standard
The next question is - how could we make several apps look like this without
 repeating all this code?  That is the subject of our next tutorial.
 
\end_layout

\begin_layout Standard
Tutorial 22 - Creating a “Look and Feel” Plugin for Hobo
\end_layout

\begin_layout Standard
By Tom Locke
\end_layout

\begin_layout Standard
In this tutorial we will start with the results of Tutorial 21.
  To re-use this work across many apps, we’ll use the standard Rails technique
 - create a plugin.
 
\end_layout

\begin_layout Standard
The plugin will contain:
\end_layout

\begin_layout Standard
A DRYML taglib with all of our tag definitions
\end_layout

\begin_layout Standard
A Public directory, containing our images and stylesheets
\end_layout

\begin_layout Standard
Somehow the idea of “creating a plugin” seems like a big deal, but it’s
 there’s really nothing to it.
 Pretty much all we’re going to do is move a few files into different places.
\end_layout

\begin_layout Standard
Here is the content of a batch file to create the folders and move the files:
\end_layout

\begin_layout Standard
Figure 253: Batch file with commands to create the plugin folders and content
\end_layout

\begin_layout Standard
Or, as individual commands:
\end_layout

\begin_layout Standard
> md vendor
\backslash
plugins
\backslash
nifa
\end_layout

\begin_layout Standard
> cd vendor
\backslash
plugins
\backslash
nifa
\end_layout

\begin_layout Standard
> md taglibs
\end_layout

\begin_layout Standard
> md public
\end_layout

\begin_layout Standard
> md public
\backslash
nifa
\end_layout

\begin_layout Standard
> md public
\backslash
nifa
\backslash
stylesheets
\end_layout

\begin_layout Standard
> md public
\backslash
nifa
\backslash
images
\end_layout

\begin_layout Standard
> cd ..
\backslash
..
\backslash
..
\end_layout

\begin_layout Standard
> copy app
\backslash
views
\backslash
taglibs
\backslash
application.dryml  vendor
\backslash
plugins
\backslash
nifa
\backslash
taglibs
\backslash
nifa.dryml
\end_layout

\begin_layout Standard
> copy public
\backslash
stylesheets
\backslash
application.css vendor
\backslash
plugins
\backslash
nifa
\backslash
public
\backslash
stylesheets
\backslash
nifa.css
\end_layout

\begin_layout Standard
> copy public
\backslash
images
\backslash
* vendor
\backslash
plugins
\backslash
nifa
\backslash
public
\backslash
nifa
\backslash
images
\end_layout

\begin_layout Standard
(That last command will also copy rails.png into the plugin, which you probably
 want to delete).
\end_layout

\begin_layout Standard
We’ve copied the whole of application.dryml into our plugin, because nearly
 everything in there belongs in the plugin, but it does need some editing:
\end_layout

\begin_layout Standard
At the top, remove all of the includes, the <set-theme> and the definition
 of <app-name>
\end_layout

\begin_layout Standard
We need to make sure our stylesheet gets included, so add the following
 parameter to the call to <old-page>
\end_layout

\begin_layout Standard
<append-stylesheets:>
\end_layout

\begin_layout Standard
   <stylesheet name="
\backslash
nifa
\backslash
stylesheets
\backslash
nifa.css"/>
\end_layout

\begin_layout Standard
 </append-stylesheets:>
\end_layout

\begin_layout Standard
The new nifa.dryml will be:
\end_layout

\begin_layout Standard
# nifa.drynl
\end_layout

\begin_layout Standard
<append-stylesheets:>
\end_layout

\begin_layout Standard
   <stylesheet name="
\backslash
nifa
\backslash
stylesheets
\backslash
nifa.css"/>
\end_layout

\begin_layout Standard
 </append-stylesheets:>
\end_layout

\begin_layout Standard
# Add this remove the live search and add sidebars
\end_layout

\begin_layout Standard
<extend tag="page">
\end_layout

\begin_layout Standard
  <old-page merge without-live-search>
\end_layout

\begin_layout Standard
   
\end_layout

\begin_layout Standard
  # need this to acces the nifa.css stylesheet 
\end_layout

\begin_layout Standard
   <append-stylesheets:>
\end_layout

\begin_layout Standard
      <stylesheet name="
\backslash
nifa
\backslash
stylesheets
\backslash
nifa.css"/>
\end_layout

\begin_layout Standard
    </append-stylesheets:>
\end_layout

\begin_layout Standard
   #    
\end_layout

\begin_layout Standard
    <content: replace>
\end_layout

\begin_layout Standard
      <section-group class="page-content">
\end_layout

\begin_layout Standard
        <aside param="aside1"><search-and-browse/></aside>
\end_layout

\begin_layout Standard
         <section param="content"/>
\end_layout

\begin_layout Standard
        <aside param="aside2"/>
\end_layout

\begin_layout Standard
      </section-group>
\end_layout

\begin_layout Standard
    </content:>
\end_layout

\begin_layout Standard
    <footer: param><footer-nav/></footer:>
\end_layout

\begin_layout Standard
  </old-page>
\end_layout

\begin_layout Standard
</extend>
\end_layout

\begin_layout Standard
# Replace the default navigation bar
\end_layout

\begin_layout Standard
<def tag="main-nav">
\end_layout

\begin_layout Standard
  <navigation class="main-nav">
\end_layout

\begin_layout Standard
    <nav-item href="">Home</nav-item>
\end_layout

\begin_layout Standard
    <nav-item href="">About Us</nav-item>
\end_layout

\begin_layout Standard
    <nav-item href="">Grants</nav-item>
\end_layout

\begin_layout Standard
    <nav-item href="">Forms</nav-item>
\end_layout

\begin_layout Standard
    <nav-item href="">Newsroom</nav-item>
\end_layout

\begin_layout Standard
    <nav-item href="">Help</nav-item>
\end_layout

\begin_layout Standard
    <nav-item href="">Contact Us</nav-item>
\end_layout

\begin_layout Standard
  </navigation>  
\end_layout

\begin_layout Standard
</def>
\end_layout

\begin_layout Standard
# new tag 
\end_layout

\begin_layout Standard
<def tag="search-and-browse" attrs="current-subject"> 
\end_layout

\begin_layout Standard
  <div class="search-and-browse"> 
\end_layout

\begin_layout Standard
    <div param="search"> 
\end_layout

\begin_layout Standard
      <h3>Search CSREES</h3> 
\end_layout

\begin_layout Standard
      <form action=""> 
\end_layout

\begin_layout Standard
        <input type="text" class="search-field"/> 
\end_layout

\begin_layout Standard
        <submit label="Go"/> 
\end_layout

\begin_layout Standard
      </form> 
\end_layout

\begin_layout Standard
      <p class="help"><a href="">Search Help</a></p> 
\end_layout

\begin_layout Standard
    </div> 
\end_layout

\begin_layout Standard
    <div param="browse-by-audience"> 
\end_layout

\begin_layout Standard
      <h3>Browse by Audience</h3> 
\end_layout

\begin_layout Standard
      <select-menu first-option="Information for..." options="&[]"/>   
\end_layout

\begin_layout Standard
    </div> 
\end_layout

\begin_layout Standard
    <div param="browse-by-subject"> 
\end_layout

\begin_layout Standard
      <h3>Browse by Subject</h3> 
\end_layout

\begin_layout Standard
      <navigation current="&current_subject"> 
\end_layout

\begin_layout Standard
        <nav-item href="/">Agricultural &amp; Food Biosecurity</nav-item>
 
\end_layout

\begin_layout Standard
        <nav-item href="/">Agricultural Systems</nav-item> 
\end_layout

\begin_layout Standard
        <nav-item href="/">Animals &amp; Animal Products</nav-item> 
\end_layout

\begin_layout Standard
        <nav-item href="/">Biotechnology &amp; Geneomics</nav-item> 
\end_layout

\begin_layout Standard
        <nav-item href="/">Economy &amp; Commerce</nav-item> 
\end_layout

\begin_layout Standard
        <nav-item href="/">Education</nav-item> 
\end_layout

\begin_layout Standard
        <nav-item href="/">Families, Youth &amp; Communities</nav-item>
 
\end_layout

\begin_layout Standard
      </navigation> 
\end_layout

\begin_layout Standard
    </div> 
\end_layout

\begin_layout Standard
  </div>
\end_layout

\begin_layout Standard
</def>
\end_layout

\begin_layout Standard
# Parameterized panel
\end_layout

\begin_layout Standard
<def tag="nav-panel">
\end_layout

\begin_layout Standard
  <div class="nav-panel" param="default">
\end_layout

\begin_layout Standard
    <h3 param="heading"></h3>
\end_layout

\begin_layout Standard
    <div param="body">
\end_layout

\begin_layout Standard
      <ul param="items"/>
\end_layout

\begin_layout Standard
    </div>
\end_layout

\begin_layout Standard
  </div>
\end_layout

\begin_layout Standard
</def>
\end_layout

\begin_layout Standard
# Footer parameterized tag
\end_layout

\begin_layout Standard
<def tag="footer-nav">
\end_layout

\begin_layout Standard
   <ul>
\end_layout

\begin_layout Standard
       <nav-item href="/">NIFA</nav-item>
\end_layout

\begin_layout Standard
      	<nav-item href="/">USDA.gov</nav-item>
\end_layout

\begin_layout Standard
      	<nav-item href="/">Site Map</nav-item>
\end_layout

\begin_layout Standard
      	<nav-item href="/">Policies</nav-item>
\end_layout

\begin_layout Standard
      	<nav-item href="/">Grants.gov</nav-item>
\end_layout

\begin_layout Standard
		<nav-item href="/">CRIS</nav-item>
\end_layout

\begin_layout Standard
		<nav-item href="/">REEIS</nav-item>
\end_layout

\begin_layout Standard
		<nav-item href="/">Leadership Management Dashboard</nav-item>
\end_layout

\begin_layout Standard
		<nav-item href="/">eXension</nav-item>
\end_layout

\begin_layout Standard
      	<nav-item href="/">RSS</nav-item>
\end_layout

\begin_layout Standard
    </ul>
\end_layout

\begin_layout Standard
</def>
\end_layout

\begin_layout Standard
Using the plugin
\end_layout

\begin_layout Standard
To try out the plugin, create a new blank Hobo app.
 There are then three steps to install and setup the plugin:
\end_layout

\begin_layout Standard
Step 1.
   Copy vendor
\backslash
plugins
\backslash
nifa from nifa-demo  into vendor
\backslash
plugins in the new app.
\end_layout

\begin_layout Standard
Step 2.
  To install the taglib add:
\end_layout

\begin_layout Standard
<include src="nifa" plugin="nifa"/>
\end_layout

\begin_layout Standard
to application.dryml.
 It must be added after the <set-theme> tag.
\end_layout

\begin_layout Standard
Step 3.
 To install the public assets:
\end_layout

\begin_layout Standard
> copy vendor
\backslash
plugins
\backslash
nifa
\backslash
public
\backslash
* public
\end_layout

\begin_layout Standard
That should be it.
 Your new app will now look like the NIFA website, and the tags we defined,
 such as <nav-panel> will be available in every template.
\end_layout

\begin_layout Standard
Tutorial 23 – Using Hobo Lifecycles for Workflow
\end_layout

\begin_layout Standard
By Venka Ashtakala
\end_layout

\begin_layout Standard
Now that we have our “Four Table” application working the way we want, let’s
 add an approval process so that new recipes need to be approved by a user
 before they are published to the web.
  
\end_layout

\begin_layout Standard
To do this we can take advantage of ‘Hobo Lifecycles‘, which is the Hobo
 answer to creating a workflow.
  The workflow that we will define for this application is that a Recipe
 can exist in one of 2 states: “Not Published” and “Published” and that
 there will be two transitions: “Publish” and “Not Publish” which will move
 the Recipe from one state to the other.
 
\end_layout

\begin_layout Standard
The “Publish” transaction will move the Recipe from the “Not Published”
 to “Published” state, while the “Not Publish” transaction will do the opposite.
   Lastly we’ll make controller and view changes as necessary.
\end_layout

\begin_layout Standard
Tutorial Application:  four_table
\end_layout

\begin_layout Standard
Topic: HOBO Lifecycles
\end_layout

\begin_layout Standard
Steps
\end_layout

\begin_layout Standard
1.
 Setup the lifecycle.
  Now that we know the functional requirements for the Recipe workflow we
 wish to implement we can start modifying our Four Table application.
  We are going to add the Hobo Lifecycle definition to our Recipe model.
  Let’s open up the /app/model/recipe.rb file and add the lifecycle do...end
 block:
\end_layout

\begin_layout Standard
[…]
\end_layout

\begin_layout Standard
belongs_to :country
\end_layout

\begin_layout Standard
lifecycle :state_field => :lifecycle_state do
\end_layout

\begin_layout Standard
state :not_published, :default => :true
\end_layout

\begin_layout Standard
state :published
\end_layout

\begin_layout Standard
    
\end_layout

\begin_layout Standard
transition :publish, { :not_published => :published }, :available_to =>
 "acting_user if acting_user.signed_up?"
\end_layout

\begin_layout Standard
transition :not_publish, { :published => :not_published }, :available_to
 => "acting_user if acting_user.signed_up?"
\end_layout

\begin_layout Standard
    
\end_layout

\begin_layout Standard
end
\end_layout

\begin_layout Standard
# --- Permissions --- #
\end_layout

\begin_layout Standard
[…]
\end_layout

\begin_layout Standard
So what did we add exactly?  The lifecycle do..end block defines the lifecycle
 for a given model.
  The :state_field argument specifies that we want the lifecycle to save
 the current state to a ‘lifecycle_state’ column in the table.
  Within the block we have to define our states and transition actions.
  
\end_layout

\begin_layout Standard
We define our states by using the ‘state’ keyword, which takes the state
 name and options as arguments.
  So in this manner we have defined two states:
\end_layout

\begin_layout Standard
 :not_published
\end_layout

\begin_layout Standard
 :published
\end_layout

\begin_layout Standard
The :default => :true argument to the :not_published state, means that when
 the state is not defined, such as when the recipe is created, its initial
 state will be :not_published.
  
\end_layout

\begin_layout Standard
After the state declarations, we have defined two transition actions using
 the ‘transition’ keyword.
  The transition keyword requires a name, a hash that specifies the state
 transition and then options.
  The first transition, :publish, specifies that when this action is executed,
 the Recipe’s state will go from :not_published to :published.
  The :available_to argument specifies that this action can only be executed
 by a user that has signed up, so guests are not allowed to execute this
 action.
  The second transition, :not_publish, changes the state from :published
 to :not_published, and limits the action to be available only to signed
 up users.
\end_layout

\begin_layout Standard
By adding the lifecycle behaviour to our model, we’ll need to generate and
 run a hobo g migration since a new ‘lifecycle_state’ column will be added
 to our recipes table.
  At the command line, in your application directory, execute the following:
\end_layout

\begin_layout Standard
> hobo g migration
\end_layout

\begin_layout Standard
Select ‘m’ when prompted to migrate now, and then specify a name for this
 migration.	
\end_layout

\begin_layout Standard
2.
 Setup the lifecycle controls in your view.
  Now that we have setup the lifecycle for our Recipe model, we need to
 expose the transition actions to our users.
  HOBO makes this very easy by giving us a predefined dryml tag called <transiti
on-buttons/> and we’ll use this tag on our Recipe listing page.
\end_layout

\begin_layout Standard
Open up the views/recipes/index.dryml page and change this code:
\end_layout

\begin_layout Standard
<table-plus fields="this, categories.count, categories,country"/>
\end_layout

\begin_layout Standard
to:
\end_layout

\begin_layout Standard
		 <table-plus fields="this, categories.count, categories, country">
\end_layout

\begin_layout Standard
	   	<controls:>
\end_layout

\begin_layout Standard
     <transition-buttons/>
\end_layout

\begin_layout Standard
  </controls:>
\end_layout

\begin_layout Standard
</table-plus>
\end_layout

\begin_layout Standard
By using the <controls:> parameter tag in table-plus, it allows us to insert
 an extra column at the end of the table where we can place action buttons
 or links.
  There we use the <transition-buttons/> tag to specify that lifecycle transitio
n buttons should show for any actions that are available for the current
 user.
  
\end_layout

\begin_layout Standard
3.
 Setup the lifecycle actions in the controller.
  We need to make a couple of changes to our Recipes controller:
\end_layout

\begin_layout Standard
 
\end_layout

\begin_layout Standard
The lifecycle actions need to be added to the controller so that the transition-
buttons added above work correctly.
  To do this, just open up:
\end_layout

\begin_layout Standard
/app/controllers/recipes_controller
\end_layout

\begin_layout Standard
 and replace the existing auto_actions list with this:
\end_layout

\begin_layout Standard
auto_actions :all
\end_layout

\begin_layout Standard
	
\end_layout

\begin_layout Standard
Specifying :all will also add support for the lifecycle actions.
\end_layout

\begin_layout Standard
4.
 Modify the Recipes Index page.
 The Recipes index page needs to be modified so that it only shows published
 recipes when the user is a Guest, and all the Recipes for logged in users.
  So we need to do add the following named_scope to the Recipe model:
\end_layout

\begin_layout Standard
named_scope :viewable, lambda {|acting_user| {:conditions => “#{acting_user.signe
d_up??1:0}=1 or lifecycle_state='published'"  }}
\end_layout

\begin_layout Standard
…which returns all Recipes for logged in users, and only published recipes
 to Guest users.
 
\end_layout

\begin_layout Standard
Note: The lambda block is used so that we can pass in a parameter to a named_sco
pe, which in this case is a reference to the logged in user.
\end_layout

\begin_layout Standard
The Recipe controller index action needs to be modified so that when a Guest
 user is viewing the Recipe listing page, only “published” Recipes will
 be shown.
  To do this, change the following line by inserting in the highlighted
 text:
\end_layout

\begin_layout Standard
Original:
\end_layout

\begin_layout Standard
hobo_index Recipe.apply_scopes(:search => [params[:search], :title, :body],
 :order_by  => parse_sort_param(:title, :country))
\end_layout

\begin_layout Standard
To:
\end_layout

\begin_layout Standard
hobo_index Recipe.viewable(current_user).apply_scopes(:search => [params[:search],
 :title, :body], :order_by  => parse_sort_param(:title, :country))
\end_layout

\begin_layout Standard
5.
 Try it out.
  Restart your server to see the changes.
  Following that, access the Recipe listing page as a Guest and you should
 see that there aren’t any Recipes showing (this is because all the Recipes
 are in a state of ‘Not Published’):
\end_layout

\begin_layout Standard
Figure 254: Guest view Recipes - All recipes are in state "Not Published"
\end_layout

\begin_layout Standard
If you login as a user you should see your recipes showing with ‘Publish’
 buttons next to each row:
\end_layout

\begin_layout Standard
Figure 255: Recipes ready to Publish.
\end_layout

\begin_layout Standard
To publish a Recipe just click on the ‘Publish’ button.
  For this example, I’ll publish the Omelet recipe.
  After clicking on the button, I’ll get the show page for the Omelet.
\end_layout

\begin_layout Standard
Figure 256: Omelet recipe after being placed in the "Published" state
\end_layout

\begin_layout Standard
And if I go back to my Recipe listing page I see:
\end_layout

\begin_layout Standard
Figure 257: Recipe index with buttons for "Publish" and "Not Publish"
\end_layout

\begin_layout Standard
Since my Omelet recipe has been published, the only available action for
 it is to ‘Not Publish’ it.
\end_layout

\begin_layout Standard
If I go to the Recipe listing page as a Guest user, I should now see my
 Omelet recipe:
\end_layout

\begin_layout Standard
Figure 258: Guest user can only see the published Recipe
\end_layout

\begin_layout Standard
6.
 Improve the navigation.
 So at this point we are able to Publish and Not Publish our recipes, so
 our workflow is behaving as we expect.
  But the navigation can be improved and would be cleaner if after we clicked
 on a transition button the page would just refresh instead of taking us
 to the show screen for the recipe.
  To do this, we will need to override the default lifecycle actions in
 the Recipes controller.
  
\end_layout

\begin_layout Standard
For each transition we define, hobo creates 2 controller actions, 1 for
 a GET request and 1 for a PUT request.
  So, for the Publish transition action, hobo creates a publish action for
 GET requests, and a do_publish action for PUT  requests.
  The publish action would be used if we wanted to show a form before executing
 the transition action, i.e.
  if we wanted to collect comments from the user before he/she Publishes
 or Not Publishes, we could show a form with a comments box and a Publish/Not
 Publish submit button.
  But in this example, we just want to configure the application so that
 after a Recipe is Published or Not Published, the browser should redirect
 back to the Recipe listing page.
  To do this we’ll add the following 2 actions to our Recipe controller
 just after the index action:
\end_layout

\begin_layout Standard
  def do_publish
\end_layout

\begin_layout Standard
    do_transition_action :publish do
\end_layout

\begin_layout Standard
      redirect_to recipes_path
\end_layout

\begin_layout Standard
    end
\end_layout

\begin_layout Standard
  end
\end_layout

\begin_layout Standard
  def do_not_publish
\end_layout

\begin_layout Standard
    do_transition_action :not_publish do
\end_layout

\begin_layout Standard
      redirect_to recipes_path
\end_layout

\begin_layout Standard
    end
\end_layout

\begin_layout Standard
  end
\end_layout

\begin_layout Standard
These actions override the default hobo actions so that we can specify the
 page redirect after the transition has been executed.
  Once you have added these actions, if you access the Recipe index page
 and click on a Publish or Not Publish button, you’ll just see the page
 get refreshed.
  
\end_layout

\begin_layout Standard
So now you have a working Publish/Not Publish workflow for Recipes in the
 Four Tables application.
\end_layout

\begin_layout Standard
Note:  This example is a basic implementation of Hobo lifecycles, but, it
 does serve as a good introduction to its various features.
  It is possible to implement workflows with numerous states and transitions,
 and the ability to implement more fine-grained security for each transition
 using the :available_to argument.
  Consult the full Hobo Lifecycles overview at http://cookbook.hobocentral.net
 
\end_layout

\begin_layout Standard
Tutorial 24 – Creating an Administration Sub-Site
\end_layout

\begin_layout Standard
By Bryan Larsen
\end_layout

\begin_layout Standard
This tutorial will show how you can create an administrative sub-site for
 a Hobo.
   This will allow the administrator to create, update and destroy any database
 row without writing any view code.
 
\end_layout

\begin_layout Standard
 
\end_layout

\begin_layout Standard
Generator steps 
\end_layout

\begin_layout Standard
Let’s add an admin sub-site to the project we created in the “Agile Project
 Manager” tutorial.
  
\end_layout

\begin_layout Standard

\backslash
projects> hobo g admin_subsite --make-front-site 
\end_layout

\begin_layout Standard

\backslash
projects> hobo g front_controller admin::front --add-routes 
\end_layout

\begin_layout Standard
Figure 259: Generator console output for creating an admin sub-site
\end_layout

\begin_layout Standard
Model Modifications
\end_layout

\begin_layout Standard
We would like to “hide” our code table maintenance the admin sub-site.
  Currently we have one code table, requirement_statuses (model = RequirementSta
tus).
\end_layout

\begin_layout Standard
Let’s first change all of the permissions for this model to “true”, as only
 an administrator will be able to access this sub-site:
\end_layout

\begin_layout Standard
Controller Modifications
\end_layout

\begin_layout Standard
We need to move the controller for RequirementStatus to the admin folder
 and modify it to be:
\end_layout

\begin_layout Standard
Class Admin::RequirementStatusesController < Admin::AdminSiteController
 
\end_layout

\begin_layout Standard
      hobo_model_controller RequirementStatus 
\end_layout

\begin_layout Standard
      auto_actions :all 
\end_layout

\begin_layout Standard
end 
\end_layout

\begin_layout Standard
Figure 260: View of the Admin folder contents
\end_layout

\begin_layout Standard
At this stage you should be able to run your application.
  If you browse to "/admin", you can create, remove, update and destroy
 any requirement status:
\end_layout

\begin_layout Standard
Figure 261: View of the Admin Sub-Site
\end_layout

\begin_layout Standard
 
\end_layout

\begin_layout Standard
Tutorial 25 – Using Hobo Database Index Generation
\end_layout

\begin_layout Standard
By Matt Jones
\end_layout

\begin_layout Standard
Defining effective indexes on your data can give massive database performance
 benefits in any application.
 To further this goal, Hobo’s migration generator attempts to provide useful
 indices without any additional code, and provides shorthand for defining
 indices.
\end_layout

\begin_layout Standard
The :index Option
\end_layout

\begin_layout Standard
Throughout the index generator API, the :index parameter is used to switch
 indexing on/off and specify an explicit name for an index.
 The convention is:
\end_layout

\begin_layout Standard
:index => true will switch on indexing for a field not indexed by default;
 the name used is the default name generated by Rails.
\end_layout

\begin_layout Standard
:index => false will switch off automatic indexing for a field.
\end_layout

\begin_layout Standard
:index => ‘name’ will specify a name for the generated index.
 Note that some databases require that index names be unique across the
 entire database, not just the individual table.
\end_layout

\begin_layout Standard
Note: Oracle’s 30-character limit for entity names causes problems with
 the default naming scheme that Rails uses for indices.
 The Oracle driver for ActiveRecord attempts to mitigate this by shortening
 overlong index names in add_index; unfortunately, this will break the generated
 down migrations (which rely on the original index names).
 The best short-term solution is to pass a manual index name parameter wherever
 possible.
\end_layout

\begin_layout Standard
Automatic Indexing
\end_layout

\begin_layout Standard
The belongs_to associations will automatically declare an index on their
 foreign key field; polymorphic belongs_to will declare a multi-field index
 on [association_type, foreign_key].
 
\end_layout

\begin_layout Standard
Example:
\end_layout

\begin_layout Standard
class SomeModel < ActiveRecord::Base
\end_layout

\begin_layout Standard
  
\end_layout

\begin_layout Standard
 hobo_model
\end_layout

\begin_layout Standard
  belongs_to :other_model
\end_layout

\begin_layout Standard
  belongs_to :another_model, :index => ‘some_random_name’
\end_layout

\begin_layout Standard
  belongs_to :fooable, :polymorphic => true
\end_layout

\begin_layout Standard
end
\end_layout

\begin_layout Standard
Will generate the following in an up migration:
\end_layout

\begin_layout Standard
add_index :some_models, :other_model_id
\end_layout

\begin_layout Standard
add_index :some_models, :another_model_id, :name => ‘some_random_name’
\end_layout

\begin_layout Standard
add_index :some_models, [:fooable_type, :fooable_id]
\end_layout

\begin_layout Standard
Lifecycle state fields will also be automatically indexed, as will the inheritan
ce_column of an STI parent class.
\end_layout

\begin_layout Standard
Indexing in the ‘fields do’ block
\end_layout

\begin_layout Standard
Within the standard fields block, indexes can be declared as part of a field,
 just like the :required or :unique options.
 Fields that also have the :unique option will automatically declare a unique
 index.
\end_layout

\begin_layout Standard
Example:
\end_layout

\begin_layout Standard
class SomeModel < ActiveRecord::Base
\end_layout

\begin_layout Standard
  fields do
\end_layout

\begin_layout Standard
    name :string, :index => true
\end_layout

\begin_layout Standard
    unique_field :string, :unique, :index => ‘foo’
\end_layout

\begin_layout Standard
  end
\end_layout

\begin_layout Standard
end
\end_layout

\begin_layout Standard
Will generate the following in an up migration:
\end_layout

\begin_layout Standard
add_index :some_models, :name
\end_layout

\begin_layout Standard
add_index :some_models, :unique_field, :name => ‘foo’, :unique => true
\end_layout

\begin_layout Standard
Indexing in the model
\end_layout

\begin_layout Standard
More complicated indexes may need to be declared outside the fields block.
 For instance, specific slow-running SQL queries may benefit from a multi-field
 index.
 The index method provides a simple interface for specifying any type of
 index on the model.
\end_layout

\begin_layout Standard
Example:
\end_layout

\begin_layout Standard
class SomeModel < ActiveRecord::Base
\end_layout

\begin_layout Standard
  fields do
\end_layout

\begin_layout Standard
    last_name :string
\end_layout

\begin_layout Standard
    first_name :string
\end_layout

\begin_layout Standard
  end
\end_layout

\begin_layout Standard
  index [:last_name, :first_name]
\end_layout

\begin_layout Standard
end
\end_layout

\begin_layout Standard
Will generate the following in an up migration:
\end_layout

\begin_layout Standard
add_index :some_models, [:last_name, :first_name]
\end_layout

\begin_layout Standard
When declaring a multi-field index, the order is relevant - consult your
 database’s manual for more detail (for example, section 7.4.3 of the MySQL
 5.0 Reference).
\end_layout

\begin_layout Standard
The index method currently supports two options:
\end_layout

\begin_layout Standard
:name - use to specify the name of the index.
 If not given, the Rails default will be used.
\end_layout

\begin_layout Standard
:unique - passing :unique => true will specify the creation of a unique
 index.
\end_layout

\end_body
\end_document
