#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass hobo
\use_default_options true
\begin_modules
logicalmkup
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement H
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks true
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry false
\use_amsmath 0
\use_esint 0
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date true
\use_refstyle 0
\boxbgcolor #e0e0e8
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth -1
\tocdepth 2
\paragraph_separation skip
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 2
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section*
Tutorial 16 – The <a> Hyperlink Tag 
\end_layout

\begin_layout Standard
In this tutorial you will learn to develop sophisticated data-driven hyperlinks
 in you Hobo pages.
 
\end_layout

\begin_layout Standard
Tutorial Application: four_table
\end_layout

\begin_layout Standard
Topics
\end_layout

\begin_layout Standard
The <a> “hyperlink” tag for calling data-driven pages
\end_layout

\begin_layout Standard
Steps
\end_layout

\begin_layout Standard
1.
 Review the <a> tag usage within Hobo’s auto-generated tags.
 Let’s take a look at the <a> tag usage in the auto-generated tags for the
 Recipe model.
\end_layout

\begin_layout Standard
<!--New Page Link from the Index Page Tag-->
\end_layout

\begin_layout Standard
<a action="new" to="&model" param="new-link"/>
\end_layout

\begin_layout Standard
This tag results in the ‘New Recipe’ hyperlink with the route ‘http://localhost:
3000/recipes/new’.
\end_layout

\begin_layout Standard
<!--Edit Page Link from the Show Page Tag-->
\end_layout

\begin_layout Standard
<a action="edit" if="&can_edit?" param="edit-link">Edit Recipe</a>
\end_layout

\begin_layout Standard
This tag results in the ‘Edit Recipe’ hyperlink with a route like http://localho
st:3000/recipes/2-omelette/edit.
\end_layout

\begin_layout Standard
2.
 Construct a link to an index (record listing) page.
 Let’s work in the home page in the file views/front/index.html.
 We will place our test code after the “Congratulations .
 .
 .
 “ message.
 
\end_layout

\begin_layout Standard
<br/><h4>
\end_layout

\begin_layout Standard
<a to="&Country" action="index" >List My Countries</a><br/>
\end_layout

\begin_layout Standard
</h4>
\end_layout

\begin_layout Standard
This code will generate a link to a listing of countries in your database.
 
\end_layout

\begin_layout Standard
	
\end_layout

\begin_layout Standard
Note: The to attribute defines the model to be used in the listing.
 It is always prefixed by the & character.
 The action attribute defines the controller action, which in the above
 case uses Hobo’s built-in index action.
 As you get more sophisticated, you will learn to define your own controller
 actions.
 These can be referred to by the action attribute too.
\end_layout

\begin_layout Standard
Of course, if you click on the ‘List My Countries’ link, you will now see
 a listing of countries.
\end_layout

\begin_layout Standard
3.	Construct a link to a new record page.
 We can construct a link to create new countries in much the same way.
\end_layout

\begin_layout Standard
<a to="&Country" action="new" >New Country</a><br/>
\end_layout

\begin_layout Standard
Now you’ve got another link to try out.
\end_layout

\begin_layout Standard
4.	Construct a link to an edit record page.
 If you want to create a custom link to an edit page, you have to be sure
 you are in the right context.
 Hobo can implicitly figure out which record you wish to edit, but only
 if you are displaying a particular record.
\end_layout

\begin_layout Standard
     In the example from Step 1 above, the ‘edit page’ link occurs in a
 <show-page> tag definition so Hobo knows what record you want to edit.
\end_layout

\begin_layout Standard
Let’s create our own link on the Country <show-page> tag by using the <content-b
ody:> parameter tag that is defined in the auto-generated <show-page> tag
 for the Country model.
 Create a new file called show.dryml in your views/countries directory.
\end_layout

\begin_layout Standard
You need to use the parameter tag or Hobo will ignore your code.
 This is just how the <show-page> tag was defined.
\end_layout

\begin_layout Standard
<show-page>
\end_layout

\begin_layout Standard
	<content-body:>
\end_layout

\begin_layout Standard
		<a action="edit" >Edit My Country</a><br/>
\end_layout

\begin_layout Standard
	</content-body:>
\end_layout

\begin_layout Standard
</show-page>
\end_layout

\begin_layout Standard
Go ahead and refresh your browser, click on the ‘Country’ tab and click
 on a country and you will see your new link to edit it on the bottom left.
\end_layout

\begin_layout Standard
Figure 150: Page view of custom <show-page> tag
\end_layout

\begin_layout Standard
5.
   Construct a link to a specific record.
 In general, Hobo takes care of linking to specific records for you by setting
 up the links implicitly in the <index-page>.
 If you need to link to a specific record, that will require a little Ruby
 to address a specific record in the database.
 
\end_layout

\begin_layout Standard

\end_layout

\end_body
\end_document
